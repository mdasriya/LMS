import React, { useState, useEffect } from "react";
// import {
//   Box,
//   FormControl,
//   FormLabel,
//   Input,
//   Select,
//   Button,
//   Grid,
//   Center,
//   HStack,
//   Heading,
//   GridItem,
//   useToast,
// } from "@chakra-ui/react";
// //import { getFormSubmissionInfo } from "react-router-dom/dist/dom";

// import axios from "axios";

// const NewBooking = () => {
//   const [projectName, setProjectName] = useState("");
//   const [blockName, setBlockname] = useState("");
//   const [plotName, setPlotName] = useState("");
//   const [contractorName, setcontractorName] = useState("");
//   const [plottype, setplottype] = useState("");
//   const [registerygender, setregisterygender] = useState("");
//   const [discountApplicable, setdiscountApplicable] = useState("");
//   const [constructionapplicable, setconstructionapplicable] = useState("");

//   const plotTypes = ["Normal", "EWS", "1BHK", "2BHK", "3BHK", "4BHK", "5BHK"]; // Replace with actual plot types
//   const genders = ["Male", "Female", "Other"]; // Replace with actual gender options

//   const toast = useToast();
//   const [formData, setFormData] = useState({
//     projectName: "",
//     blockName: "",
//     plotNo: "",
//     plotType: "",
//     customerName: "",
//     customerAddress: "",
//     customerContact: "",
//     registryGender: "",
//     areaSqmt: "",
//     ratePerSqmt: "",
//     totalAmount: "",
//     discountApplicable: "No",
//     discountPercent: "",
//     netAmount: "",
//     registryAmount: "",
//     serviceAmount: "",
//     maintenanceAmount: "",
//     miscAmount: "",
//     grandTotal: "",
//     constructionApplicable: "No",
//     constructionContractor: "",
//     totalAmountPayable: "",
//     guidelineAmount: "",
//     registryPercent: "",
//     bankAmountPayable: "",
//     cashAmountPayable: "",
//     bookingDate: "",
//     constructionAmount: "",
//     remarks: "",
//   });

//   const handleChange = (e) => {
//     const { name, value } = e.target;
//     setFormData((prevData) => ({ ...prevData, [name]: value }));
//   };

//   const onAddBook = async (e) => {
//     e.preventDefault();
//     const url = "https://lkgexcel.com/backend/newbooking.php";

//     const fData = new FormData();
//     fData.append("projectName", document.getElementById("projectName").value);
//     fData.append("blockName", document.getElementById("blockName").value);
//     fData.append("plotNo", document.getElementById("plotNo").value);
//     fData.append("plotType", document.getElementById("plotType").value);
//     fData.append("customerName", document.getElementById("customerName").value);
//     fData.append(
//       "customerAddress",
//       document.getElementById("customerAddress").value
//     );
//     fData.append(
//       "customerContact",
//       document.getElementById("customerContact").value
//     );
//     fData.append(
//       "registryGender",
//       document.getElementById("registryGender").value
//     );
//     fData.append("areaSqmt", document.getElementById("areaSqmt").value);
//     fData.append("ratePerSqmt", document.getElementById("ratePerSqmt").value);
//     fData.append("totalAmount", document.getElementById("totalAmount").value);
//     fData.append(
//       "discountApplicable",
//       document.getElementById("discountApplicable").value
//     );
//     fData.append(
//       "discountPercent",
//       document.getElementById("discountPercent").value
//     );
//     fData.append("netAmount", document.getElementById("netAmount").value);
//     fData.append(
//       "registryAmount",
//       document.getElementById("registryAmount").value
//     );
//     fData.append(
//       "serviceAmount",
//       document.getElementById("serviceAmount").value
//     );
//     fData.append(
//       "maintenanceAmount",
//       document.getElementById("maintenanceAmount").value
//     );
//     fData.append("miscAmount", document.getElementById("miscAmount").value);
//     fData.append("grandTotal", document.getElementById("grandTotal").value);
//     fData.append(
//       "constructionApplicable",
//       document.getElementById("constructionApplicable").value
//     );
//     fData.append(
//       "constructionContractor",
//       document.getElementById("constructionContractor").value
//     );
//     fData.append(
//       "totalAmountPayable",
//       document.getElementById("totalAmountPayable").value
//     );
//     fData.append(
//       "guidelineAmount",
//       document.getElementById("guidelineAmount").value
//     );
//     fData.append(
//       "registryPercent",
//       document.getElementById("registryPercent").value
//     );
//     fData.append(
//       "bankAmountPayable",
//       document.getElementById("bankAmountPayable").value
//     );
//     fData.append(
//       "cashAmountPayable",
//       document.getElementById("cashAmountPayable").value
//     );
//     fData.append("bookingDate", document.getElementById("bookingDate").value);
//     fData.append(
//       "constructionAmount",
//       document.getElementById("constructionAmount").value
//     );
//     fData.append("remarks", document.getElementById("remarks").value);

//     try {
//       const response = await axios.post(url, fData);
//       console.log(response);
//       updatePlotStatus();
//       toast({
//         title: "Booking added successfully!",
//         status: "success",
//         duration: 3000,
//         isClosable: true,
//         position: "top-right",
//       });
//       // Clear the form data after successful submission
//       // setFormData({
//       //   projectName: "",
//       //   blockName: "",
//       //   plotNo: "",
//       //   plotType: "",
//       //   customerName: "",
//       //   customerAddress: "",
//       //   customerContact: "",
//       //   registryGender: "",
//       //   areaSqmt: "",
//       //   ratePerSqmt: "",
//       //   totalAmount: "",
//       //   discountApplicable: "No",
//       //   discountPercent: "",
//       //   netAmount: "",
//       //   registryAmount: "",
//       //   serviceAmount: "",
//       //   maintenanceAmount: "",
//       //   miscAmount: "",
//       //   grandTotal: "",
//       //   constructionApplicable: "No",
//       //   constructionContractor: "",
//       //   totalAmountPayable: "",
//       //   guidelineAmount: "",
//       //   registryPercent: "",
//       //   bankAmountPayable: "",
//       //   cashAmountPayable: "",
//       //   bookingDate: "",
//       //   constructionAmount: "",
//       //   remarks: "",
//       // });
//     } catch (error) {
//       console.log(error.toJSON());
//     }
//   };

//   const updatePlotStatus = async () => {
//     const url = "https://lkgexcel.com/backend/setQuery.php";
//     let query =
//       "UPDATE `plot` SET `plotStatus` = 'Booked' WHERE `plotNo` = '" +
//       plotName +
//       "';";

//     let fData = new FormData();
//     fData.append("query", query);

//     try {
//       const response = await axios.post(url, fData);
//     } catch (error) {
//       console.log(error.toJSON());
//     }
//   };

//   const [projectsData, setprojectsData] = useState([]);
//   const [blockData, setblockData] = useState([]);
//   const [plotData, setplotData] = useState([]);
//   const [contractorData, setcontractorData] = useState([]);
//   const [master, setMaster] = useState([]);

//   const loadBlocks = async (pname) => {
//     let query = "SELECT * FROM `block` where projectName = '" + pname + "' ;";
//     // alert(query);

//     const url = "https://lkgexcel.com/backend/getQuery.php";
//     let fData = new FormData();

//     fData.append("query", query);

//     try {
//       const response = await axios.post(url, fData);

//       if (response && response.data) {
//         if (response.data.phpresult) {
//           setblockData(response.data.phpresult);
//           console.log(response.data.phpresult);
//         }
//       }
//     } catch (error) {
//       console.log("Please Select Proper Input");
//     }
//   };

//   const loadContractor = async () => {
//     let query = "SELECT * FROM `contractor`;";
//     // alert(query);

//     const url = "https://lkgexcel.com/backend/getQuery.php";
//     let fData = new FormData();

//     fData.append("query", query);

//     try {
//       const response = await axios.post(url, fData);

//       if (response && response.data) {
//         if (response.data.phpresult) {
//           setcontractorData(response.data.phpresult);
//           console.log(response.data.phpresult);
//         }
//       }
//     } catch (error) {
//       console.log("Please Select Proper Input");
//     }
//   };

//   const loadPlots = async (bname) => {
//     let query =
//       "SELECT * FROM `plot` where blockName = '" +
//       bname +
//       "' AND projectName ='" +
//       projectName +
//       "' AND plotStatus ='Available' ;";
//     // alert(query);

//     const url = "https://lkgexcel.com/backend/getQuery.php";
//     let fData = new FormData();

//     fData.append("query", query);

//     try {
//       const response = await axios.post(url, fData);

//       if (response && response.data) {
//         if (response.data.phpresult) {
//           setplotData(response.data.phpresult);
//           console.log(response.data.phpresult);
//         }
//       }
//     } catch (error) {
//       console.log("Please Select Proper Input");
//     }
//   };

//   const loadProjects = async () => {
//     let query = "SELECT * FROM `project`;";
//     // alert(query);

//     const url = "https://lkgexcel.com/backend/getQuery.php";
//     let fData = new FormData();

//     fData.append("query", query);

//     try {
//       const response = await axios.post(url, fData);

//       if (response && response.data) {
//         if (response.data.phpresult) {
//           setprojectsData(response.data.phpresult);
//           console.log(response.data.phpresult);
//         }
//       }
//     } catch (error) {
//       console.log("Please Select Proper Input");
//     }
//   };

//   const onSelectPlot = async (pno) => {
//     let query =
//       "SELECT * FROM `plot` where blockName = '" +
//       blockName +
//       "' AND projectName ='" +
//       projectName +
//       "' AND plotStatus ='Available' AND plotNo='" +
//       pno +
//       "';";
//     alert(query);

//     const url = "https://lkgexcel.com/backend/getQuery.php";
//     let fData = new FormData();

//     fData.append("query", query);

//     try {
//       const response = await axios.post(url, fData);

//       if (response && response.data) {
//         if (response.data.phpresult) {
//           console.log(response.data.phpresult);

//           let query1 =
//             "SELECT * FROM `master` where projectName ='" + projectName + "';";
//           // alert(query);

//           const url = "https://lkgexcel.com/backend/getQuery.php";
//           let fData1 = new FormData();

//           fData1.append("query", query1);

//           const response1 = await axios.post(url, fData1);

//           if (response1 && response1.data) {
//             if (response1.data.phpresult) {
//               setMaster(response1.data.phpresult);

//               document.getElementById("registryGender").value = "Male";

//               //document.getElementById('plotType').style.backgroundColor = 'gray';
//               // document.getElementById('plotType').disabled = true;

//               document.getElementById("areaSqmt").value =
//                 response.data.phpresult[0]["areaSqft"];
//               document.getElementById("ratePerSqmt").value =
//                 response.data.phpresult[0]["ratePerSqft"];
//               document.getElementById("totalAmount").value =
//                 document.getElementById("areaSqmt").value *
//                 document.getElementById("ratePerSqmt").value;
//               document.getElementById("discountApplicable").value = "No";
//               document.getElementById("discountPercent").value = "0";
//               document.getElementById("netAmount").value =
//                 document.getElementById("totalAmount").value;
//               document.getElementById("guidelineAmount").value =
//                 response.data.phpresult[0]["areaSqmt"] *
//                 response1.data.phpresult[0]["guideline"];

//               if (document.getElementById("registryGender").value == "Male") {
//                 document.getElementById("registryPercent").value =
//                   response1.data.phpresult[0]["registryMalePercent"];
//               }
//               if (document.getElementById("registryGender").value == "Female") {
//                 document.getElementById("registryPercent").value =
//                   response1.data.phpresult[0]["registryFemalePercent"];
//               }

//               document.getElementById("registryAmount").value =
//                 (document.getElementById("guidelineAmount").value / 100) *
//                 document.getElementById("registryPercent").value;
//               if (response1.data.phpresult[0]["serviceType"] == "Lumpsum") {
//                 document.getElementById("serviceAmount").value =
//                   response1.data.phpresult[0]["serviceValue"];
//               }
//               if (response1.data.phpresult[0]["serviceType"] == "PerSqmt") {
//                 document.getElementById("serviceAmount").value =
//                   response1.data.phpresult[0]["serviceValue"] *
//                   response.data.phpresult[0]["areaSqft"];
//               }

//               if (response1.data.phpresult[0]["maintenanceType"] == "Lumpsum") {
//                 document.getElementById("maintenanceAmount").value =
//                   response1.data.phpresult[0]["maintenanceValue"];
//               }
//               if (response1.data.phpresult[0]["maintenanceType"] == "PerSqmt") {
//                 document.getElementById("maintenanceAmount").value =
//                   response1.data.phpresult[0]["maintenanceValue"] *
//                   response.data.phpresult[0]["areaSqft"];
//               }

//               if (response1.data.phpresult[0]["miscType"] == "Lumpsum") {
//                 document.getElementById("miscAmount").value =
//                   response1.data.phpresult[0]["miscValue"];
//               }
//               if (response1.data.phpresult[0]["miscType"] == "PerSqmt") {
//                 document.getElementById("miscAmount").value =
//                   response1.data.phpresult[0]["miscValue"] *
//                   response.data.phpresult[0]["areaSqft"];
//               }

//               document.getElementById("grandTotal").value =
//                 parseFloat(document.getElementById("netAmount").value) +
//                 parseFloat(document.getElementById("registryAmount").value) +
//                 parseFloat(document.getElementById("serviceAmount").value) +
//                 parseFloat(document.getElementById("maintenanceAmount").value) +
//                 parseFloat(document.getElementById("miscAmount").value);

//               document.getElementById("constructionApplicable").value = "No";

//               if (
//                 document.getElementById("constructionApplicable").value == "No"
//               ) {
//                 document.getElementById(
//                   "constructionContractor"
//                 ).disabled = true;
//                 //document.getElementById('constructionContractor').style.backgroundColor = 'gray';
//                 document.getElementById("constructionAmount").disabled = true;
//                 //document.getElementById('constructionAmount').style.backgroundColor = 'gray';

//                 document.getElementById("totalAmountPayable").value =
//                   document.getElementById("grandTotal").value;
//               }
//               if (
//                 document.getElementById("constructionApplicable").value == "Yes"
//               ) {
//                 document.getElementById(
//                   "constructionContractor"
//                 ).disabled = false;
//                 //document.getElementById('constructionContractor').style.backgroundColor = 'white';
//                 document.getElementById("constructionAmount").disabled = false;
//                 //document.getElementById('constructionAmount').style.backgroundColor = 'white';

//                 document.getElementById("totalAmountPayable").value =
//                   parseFloat(document.getElementById("grandTotal").value) +
//                   parseFloat(
//                     document.getElementById("constructionAmount").value
//                   );
//               }

//               document.getElementById("bankAmountPayable").value =
//                 document.getElementById("guidelineAmount").value;
//               document.getElementById("cashAmountPayable").value =
//                 Number(document.getElementById("totalAmountPayable").value) -
//                 document.getElementById("guidelineAmount").value;
//               setplottype(response.data.phpresult[0]["plotType"]);
//             }
//           }
//         }
//       }
//     } catch (error) {
//       console.log("erorrrr");
//     }
//   };

//   const updateOnChange = () => {
//     document.getElementById("totalAmount").value =
//       document.getElementById("areaSqmt").value *
//       document.getElementById("ratePerSqmt").value;
//     document.getElementById("netAmount").value =
//       document.getElementById("totalAmount").value;

//     if (document.getElementById("discountApplicable").value == "Yes") {
//       document.getElementById("netAmount").value =
//         document.getElementById("totalAmount").value -
//         (document.getElementById("totalAmount").value / 100) *
//           document.getElementById("discountPercent").value;
//     } else if (document.getElementById("discountApplicable").value == "No") {
//       document.getElementById("discountPercent").value = 0;
//       document.getElementById("netAmount").value =
//         document.getElementById("totalAmount").value;
//     }

//     document.getElementById("guidelineAmount").value =
//       plotData[0]["areaSqmt"] * master[0]["guideline"];

//     if (document.getElementById("registryGender").value == "Male") {
//       document.getElementById("registryPercent").value =
//         master[0]["registryMalePercent"];
//     }
//     if (document.getElementById("registryGender").value == "Female") {
//       document.getElementById("registryPercent").value =
//         master[0]["registryFemalePercent"];
//     }

//     document.getElementById("registryAmount").value =
//       (document.getElementById("guidelineAmount").value / 100) *
//       document.getElementById("registryPercent").value;
//     if (master[0]["serviceType"] == "Lumpsum") {
//       document.getElementById("serviceAmount").value =
//         master[0]["serviceValue"];
//     }
//     if (master[0]["serviceType"] == "PerSqmt") {
//       document.getElementById("serviceAmount").value =
//         master[0]["serviceValue"] * plotData[0]["areaSqft"];
//     }

//     if (master[0]["maintenanceType"] == "Lumpsum") {
//       document.getElementById("maintenanceAmount").value =
//         master[0]["maintenanceValue"];
//     }
//     if (master[0]["maintenanceType"] == "PerSqmt") {
//       document.getElementById("maintenanceAmount").value =
//         master[0]["maintenanceValue"] * plotData[0]["areaSqft"];
//     }

//     if (master[0]["miscType"] == "Lumpsum") {
//       document.getElementById("miscAmount").value = master[0]["miscValue"];
//     }
//     if (master[0]["miscType"] == "PerSqmt") {
//       document.getElementById("miscAmount").value =
//         master[0]["miscValue"] * plotData[0]["areaSqft"];
//     }

//     document.getElementById("grandTotal").value =
//       parseFloat(document.getElementById("netAmount").value) +
//       parseFloat(document.getElementById("registryAmount").value) +
//       parseFloat(document.getElementById("serviceAmount").value) +
//       parseFloat(document.getElementById("maintenanceAmount").value) +
//       parseFloat(document.getElementById("miscAmount").value);

//     if (document.getElementById("constructionApplicable").value == "Yes") {
//       document.getElementById("constructionContractor").disabled = false;
//       //document.getElementById('constructionContractor').style.backgroundColor = 'white';
//       document.getElementById("constructionAmount").disabled = false;
//       //document.getElementById('constructionAmount').style.backgroundColor = 'white';

//       document.getElementById("totalAmountPayable").value =
//         Number(document.getElementById("grandTotal").value) +
//         Number(document.getElementById("constructionAmount").value);
//     }
//     if (document.getElementById("constructionApplicable").value == "No") {
//       document.getElementById("constructionContractor").disabled = true;
//       //document.getElementById('constructionContractor').style.backgroundColor = 'gray';
//       document.getElementById("constructionAmount").disabled = true;
//       //document.getElementById('constructionAmount').style.backgroundColor = 'gray';

//       document.getElementById("totalAmountPayable").value =
//         document.getElementById("grandTotal").value;
//     }

//     document.getElementById("bankAmountPayable").value =
//       document.getElementById("guidelineAmount").value;
//     document.getElementById("cashAmountPayable").value =
//       document.getElementById("totalAmountPayable").value -
//       document.getElementById("guidelineAmount").value;
//   };

//   onAddBook();

//   useEffect(() => {
//     // Call the loadContractor function when the component mounts
//     loadProjects();
//     loadContractor();
//   }, []);

//   return (
//     <Box p={4} width="100%" position={"relative"} bottom={"0rem"}>
//       <Center pb={2}>
//         <Heading fontSize={"22px"} position={"relative"} bottom={"1rem"}>
//           New Booking
//         </Heading>
//       </Center>
//       <Box position={"relative"} bottom={"1rem"}>
//         <form onSubmit={onAddBook}>
//           <Grid templateColumns="repeat(4, 1fr)" gap={1}>
//             <FormControl colSpan={1} isRequired>
//               <FormLabel>Project Name</FormLabel>
//               <Select
//                 id="projectName"
//                 name="state"
//                 value={projectName}
//                 onChange={(e) => {
//                   setProjectName(e.target.value);
//                   loadBlocks(e.target.value);
//                 }}
//                 placeholder="Select Project"
//               >
//                 {projectsData.map((project) => {
//                   return (
//                     <option
//                       key={project.projectName}
//                       value={project.projectName}
//                     >
//                       {project.projectName}
//                     </option>
//                   );
//                 })}
//               </Select>
//             </FormControl>

//             <FormControl>
//               <FormLabel>Block Name</FormLabel>
//               <Select
//                 id="blockName"
//                 name="state"
//                 value={blockName}
//                 onChange={(e) => {
//                   setBlockname(e.target.value);
//                   loadPlots(e.target.value);
//                 }}
//                 placeholder="Select Block"
//               >
//                 {blockData.map((block) => {
//                   return (
//                     <option key={block.blockName} value={block.blockName}>
//                       {block.blockName}
//                     </option>
//                   );
//                 })}
//               </Select>
//             </FormControl>

//             <FormControl>
//               <FormLabel>Plot No</FormLabel>
//               <Select
//                 id="plotNo"
//                 name="state"
//                 value={plotName}
//                 onChange={(e) => {
//                   setPlotName(e.target.value);
//                   onSelectPlot(e.target.value);
//                 }}
//                 placeholder="Select Plot No"
//               >
//                 {plotData.map((plot) => {
//                   return (
//                     <option key={plot.plotNo} value={plot.plotNo}>
//                       {plot.plotNo}
//                     </option>
//                   );
//                 })}
//               </Select>
//             </FormControl>

//             <FormControl>
//               <FormLabel>Plot Type</FormLabel>
//               <Select
//                 id="plotType"
//                 name="plotType"
//                 value={plottype}
//                 onChange={(e) => {
//                   setplottype(e.target.value);
//                 }}
//                 //onChange={handleChange}
//                 required
//               >
//                 <option value="" disabled>
//                   Select Plot Type
//                 </option>

//                 <option key="Normal" value="Normal">
//                   Normal
//                 </option>
//                 <option key="EWS" value="EWS">
//                   EWS
//                 </option>
//                 <option key="1BHK" value="1BHK">
//                   1BHK
//                 </option>
//                 <option key="2BHK" value="2BHK">
//                   2BHK
//                 </option>
//                 <option key="3BHK" value="3BHK">
//                   3BHK
//                 </option>
//                 <option key="4BHK" value="4BHK">
//                   4BHK
//                 </option>
//                 <option key="5BHK" value="5BHK">
//                   5BHK
//                 </option>
//               </Select>
//             </FormControl>

//             <FormControl>
//               <FormLabel>Customer Name</FormLabel>
//               <Input
//                 id="customerName"
//                 type="text"
//                 name="customerName"
//                 //onChange={handleChange}
//                 required
//               />
//             </FormControl>

//             <FormControl>
//               <FormLabel>Customer Address</FormLabel>
//               <Input
//                 id="customerAddress"
//                 type="text"
//                 name="customerAddress"
//                 //onChange={handleChange}
//                 required
//               />
//             </FormControl>

//             <FormControl>
//               <FormLabel>Customer Contact</FormLabel>
//               <Input
//                 id="customerContact"
//                 type="text"
//                 name="customerContact"
//                 //onChange={handleChange}
//                 required
//               />
//             </FormControl>

//             <FormControl>
//               <FormLabel>Registry Gender</FormLabel>
//               <Select
//                 id="registryGender"
//                 name="registryGender"
//                 onChange={(e) => {
//                   setregisterygender(e.target.value);
//                   updateOnChange();
//                 }}
//                 //onChange={handleChange}
//                 required
//               >
//                 <option value="" disabled>
//                   Select Gender
//                 </option>
//                 {genders.map((gender) => (
//                   <option key={gender} value={gender}>
//                     {gender}
//                   </option>
//                 ))}
//               </Select>
//             </FormControl>

//             <FormControl>
//               <FormLabel>Area Sqft</FormLabel>
//               <Input
//                 onChange={updateOnChange}
//                 id="areaSqmt"
//                 type="text"
//                 name="areaSqmt"
//                 //onChange={handleChange}
//                 required
//               />
//             </FormControl>

//             <FormControl>
//               <FormLabel>Rate Per Sqft</FormLabel>
//               <Input
//                 onChange={updateOnChange}
//                 id="ratePerSqmt"
//                 type="text"
//                 name="ratePerSqmt"
//                 //onChange={handleChange}
//                 required
//               />
//             </FormControl>

//             <FormControl>
//               <FormLabel>Total Amount</FormLabel>
//               <Input
//                 onChange={updateOnChange}
//                 id="totalAmount"
//                 type="text"
//                 name="totalAmount"
//                 //onChange={handleChange}
//                 required
//                 bg={"yellow"}
//                 color={"black"}
//               />
//             </FormControl>
//             <Box gridColumn="span 1" />
//             <FormControl>
//               <FormLabel>Discount Applicable</FormLabel>
//               <Select
//                 id="discountApplicable"
//                 name="discountApplicable"
//                 onChange={(e) => {
//                   setdiscountApplicable(e.target.value);
//                   updateOnChange();
//                 }}
//                 //onChange={handleChange}
//                 required
//               >
//                 <option value="Yes">Yes</option>
//                 <option value="No">No</option>
//               </Select>
//             </FormControl>
//             <FormControl>
//               <FormLabel>Discount Percent</FormLabel>
//               <Input
//                 onChange={updateOnChange}
//                 id="discountPercent"
//                 type="text"
//                 name="discountPercent"
//                 //onChange={handleChange}
//                 required
//               />
//             </FormControl>
//             <FormControl>
//               <FormLabel>Net Amount</FormLabel>
//               <Input
//                 onChange={updateOnChange}
//                 id="netAmount"
//                 type="text"
//                 name="netAmount"
//                 //onChange={handleChange}
//                 required
//                 bg={"yellow"}
//               />
//             </FormControl>
//             <Box gridColumn="span 1" />
//             <FormControl>
//               <FormLabel>Registry Amount</FormLabel>
//               <Input
//                 onChange={updateOnChange}
//                 id="registryAmount"
//                 type="text"
//                 name="registryAmount"
//                 //onChange={handleChange}
//                 required
//               />
//             </FormControl>

//             <FormControl>
//               <FormLabel>Service Amount</FormLabel>
//               <Input
//                 onChange={updateOnChange}
//                 id="serviceAmount"
//                 type="text"
//                 name="serviceAmount"
//                 //onChange={handleChange}
//                 required
//               />
//             </FormControl>

//             <FormControl>
//               <FormLabel>Maintenance Amount</FormLabel>
//               <Input
//                 onChange={updateOnChange}
//                 id="maintenanceAmount"
//                 type="text"
//                 name="maintenanceAmount"

//                 //onChange={handleChange}
//               />
//             </FormControl>
//             <FormControl>
//               <FormLabel>Misc Amount</FormLabel>
//               <Input
//                 onChange={updateOnChange}
//                 id="miscAmount"
//                 type="text"
//                 name="miscAmount"

//                 //onChange={handleChange}
//               />
//             </FormControl>
//             <FormControl>
//               <FormLabel>Grand Total</FormLabel>
//               <Input
//                 onChange={updateOnChange}
//                 id="grandTotal"
//                 type="text"
//                 name="grandTotal"
//                 //onChange={handleChange}
//                 bg={"yellow"}
//               />
//             </FormControl>
//             <FormControl>
//               <FormLabel>Construction Applicable</FormLabel>
//               <Select
//                 id="constructionApplicable"
//                 value={constructionapplicable}
//                 onChange={(e) => {
//                   setconstructionapplicable(e.target.value);
//                   updateOnChange();
//                 }}
//                 name="constructionApplicable"
//                 //onChange={handleChange}
//                 required
//               >
//                 <option value="Yes">Yes</option>
//                 <option value="No">No</option>
//               </Select>
//             </FormControl>
//             <FormControl>
//               <FormLabel>Construction Contractor</FormLabel>

//               <Select
//                 id="constructionContractor"
//                 type="text"
//                 name="constructionContractor"
//                 value={contractorName}
//                 onChange={(e) => {
//                   setcontractorName();
//                 }}
//                 placeholder="Select Contactor"
//               >
//                 {contractorData.map((block) => {
//                   return (
//                     <option
//                       key={block.contractorName}
//                       value={block.contractorName}
//                     >
//                       {block.contractorName}
//                     </option>
//                   );
//                 })}
//               </Select>
//             </FormControl>
//             <FormControl>
//               <FormLabel>Construction Amount</FormLabel>
//               <Input
//                 onChange={updateOnChange}
//                 id="constructionAmount"
//                 type="text"
//                 name="constructionAmount"

//                 //onChange={handleChange}
//               />
//             </FormControl>

//             <FormControl>
//               <FormLabel>Total Amount Payable</FormLabel>
//               <Input
//                 onChange={updateOnChange}
//                 id="totalAmountPayable"
//                 type="text"
//                 name="totalAmountPayable"
//                 //onChange={handleChange}
//                 bg={"yellow"}
//               />
//             </FormControl>
//             <FormControl>
//               <FormLabel>Guideline Amount</FormLabel>
//               <Input
//                 onChange={updateOnChange}
//                 id="guidelineAmount"
//                 type="text"
//                 name="guidelineAmount"

//                 //onChange={handleChange}
//               />
//             </FormControl>

//             <FormControl>
//               <FormLabel>Registry Percent</FormLabel>
//               <Input
//                 onChange={updateOnChange}
//                 id="registryPercent"
//                 type="text"
//                 name="registryPercent"

//                 //onChange={handleChange}
//               />
//             </FormControl>
//             <Box gridColumn="span 1" />
//             <Box
//               display="grid"
//               gridAutoFlow="column"
//               position={"absolute"}
//               top={"100%"}
//               gap={"2rem"}
//             >
//               <FormControl>
//                 <FormLabel>Bank Amount Payable</FormLabel>
//                 <Input
//                   onChange={updateOnChange}
//                   id="bankAmountPayable"
//                   type="text"
//                   name="bankAmountPayable"
//                   //onChange={handleChange}
//                   bg={"yellow"}
//                 />
//               </FormControl>

//               <FormControl>
//                 <FormLabel>Cash Amount Payable</FormLabel>
//                 <Input
//                   onChange={updateOnChange}
//                   id="cashAmountPayable"
//                   type="text"
//                   name="cashAmountPayable"
//                   //onChange={handleChange}
//                   bg={"yellow"}
//                 />
//               </FormControl>

//               <FormControl>
//                 <FormLabel>Booking Date</FormLabel>
//                 <Input
//                   onChange={updateOnChange}
//                   id="bookingDate"
//                   type="date"
//                   name="bookingDate"
//                   //onChange={handleChange}
//                   required
//                 />
//               </FormControl>
//               <FormControl>
//                 <FormLabel>Remarks</FormLabel>
//                 <Input
//                   onChange={updateOnChange}
//                   id="remarks"
//                   type="text"
//                   name="remarks"
//                   //onChange={handleChange}
//                   required
//                 />
//               </FormControl>

//               <Button colorScheme="blue" type="submit" mt={8}>
//                 Submit
//               </Button>
//             </Box>
//           </Grid>
//         </form>
//       </Box>
//     </Box>
//   );
// };

// export default NewBooking;
<?php
require_once 'config.php';
header("Access-Control-Allow-Origin: *");
header("Access-Control-Allow-Methods: GET, POST, OPTIONS");
header("Access-Control-Allow-Headers: Content-Type");
header("Content-Type: application/json");

// Create connection
$conn = new mysqli($host, $username, $password, $database);

// Check connection
if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

// Check if the request is to add a new booking
if ($_SERVER["REQUEST_METHOD"] === "POST") {
    // Retrieve form data
    $projectName = isset($_POST['projectName']) ? $_POST['projectName'] : '';
    $blockName = isset($_POST['blockName']) ? $_POST['blockName'] : '';
    $plotNo = isset($_POST['plotNo']) ? $_POST['plotNo'] : '';
    $plotType = isset($_POST['plotType']) ? $_POST['plotType'] : '';
    $customerName = isset($_POST['customerName']) ? $_POST['customerName'] : '';
    $customerAddress = isset($_POST['customerAddress']) ? $_POST['customerAddress'] : '';
    $customerContact = isset($_POST['customerContact']) ? $_POST['customerContact'] : '';
    $registryGender = isset($_POST['registryGender']) ? $_POST['registryGender'] : '';
    $areaSqft = isset($_POST['areaSqft']) ? $_POST['areaSqft'] : '';  // Corrected column name
    $rateAreaSqft = isset($_POST['rateAreaSqft']) ? $_POST['rateAreaSqft'] : '';  // Corrected column name
    $totalAmount = isset($_POST['totalAmount']) ? $_POST['totalAmount'] : '';
    $discountApplicable = isset($_POST['discountApplicable']) ? $_POST['discountApplicable'] : '';
    $discountPercent = isset($_POST['discountPercent']) ? $_POST['discountPercent'] : '';
    $netAmount = isset($_POST['netAmount']) ? $_POST['netAmount'] : '';
    $registryAmount = isset($_POST['registryAmount']) ? $_POST['registryAmount'] : '';
    $serviceAmount = isset($_POST['serviceAmount']) ? $_POST['serviceAmount'] : '';
    $maintenanceAmount = isset($_POST['maintenanceAmount']) ? $_POST['maintenanceAmount'] : '';
    $miscAmount = isset($_POST['miscAmount']) ? $_POST['miscAmount'] : '';
    $grandTotal = isset($_POST['grandTotal']) ? $_POST['grandTotal'] : '';
    $constructionApplicable = isset($_POST['constructionApplicable']) ? $_POST['constructionApplicable'] : '';
    $constructionContractor = isset($_POST['constructionContractor']) ? $_POST['constructionContractor'] : '';
    $totalAmountPayable = isset($_POST['totalAmountPayable']) ? $_POST['totalAmountPayable'] : '';
    $guidelineAmount = isset($_POST['guidelineAmount']) ? $_POST['guidelineAmount'] : '';
    $registryPercent = isset($_POST['registryPercent']) ? $_POST['registryPercent'] : '';
    $bankAmountPayable = isset($_POST['bankAmountPayable']) ? $_POST['bankAmountPayable'] : '';
    $cashAmountPayable = isset($_POST['cashAmountPayable']) ? $_POST['cashAmountPayable'] : '';
    $bookingDate = isset($_POST['bookingDate']) ? $_POST['bookingDate'] : '';
    $constructionAmount = isset($_POST['constructionAmount']) ? $_POST['constructionAmount'] : '';
    $remarks = isset($_POST['remarks']) ? $_POST['remarks'] : '';

    // Prepare the SQL statement
    $sql = "INSERT INTO booking (`id`, `projectName`, `blockName`, `plotNo`, `plotType`, `customerName`, `customerAddress`, `customerContact`, `registeryGender`, `areaSqft`, `ratePerSqft`, `totalAmount`, `discountApplicable`, `discountPercent`, `netAmount`, `registeryAmount`, `serviceAmount`, `maintenanceAmount`, `miscAmount`, `grandTotal`, `constructionApplicable`, `constructionContractor`, `constructionAmount`, `totalAmountPayable`, `guidelineAmount`, `registeryPercent`, `bankAmountPayable`, `cashAmountPayable`, `bookingDate`, `remarks`) VALUES (NULL, '$projectName', '$blockName', '$plotNo', '$plotType', '$customerName', '$customerAddress', '$customerContact', '$registryGender', '$areaSqmt', '$ratePerSqmt', '$totalAmount', '$discountApplicable', '$discountPercent', '$netAmount', '$registryAmount', '$serviceAmount', '$maintenanceAmount', '$miscAmount', '$grandTotal', '$constructionApplicable', '$constructionContractor', '$totalAmountPayable', '$guidelineAmount', '$registryPercent', '$bankAmountPayable', '$cashAmountPayable', '$bookingDate', '$constructionAmount', '$remarks')";

    // Execute the statement
    if ($conn->query($sql) === TRUE) {
        echo json_encode(["message" => "Booking added successfully"]);
    } else {
        echo json_encode(["error" => "Error: " . $sql . "<br>" . $conn->error]);
    }
} else {
    echo json_encode(["error" => "Invalid request method"]);
}

// Close connection
$conn->close();
?>

<?php
require_once 'config.php';
header("Access-Control-Allow-Origin: *");
header("Access-Control-Allow-Methods: GET, POST, OPTIONS");
header("Access-Control-Allow-Headers: Content-Type");
header("Content-Type: application/json");

// Create connection
$conn = new mysqli($host, $username, $password, $database);

// Check connection
if ($conn->connect_error) {
    die("Connection failed: " . $conn->connect_error);
}

// Check if the request is to add a new booking
if ($_SERVER["REQUEST_METHOD"] === "POST") {
    try {
        // Retrieve form data
        $projectName = $_POST['projectName'] ?? '';
        $blockName = $_POST['blockName'] ?? '';
        $plotNo = $_POST['plotNo'] ?? '';
        $plotType = $_POST['plotType'] ?? '';
        $customerName = $_POST['customerName'] ?? '';
        $customerAddress = $_POST['customerAddress'] ?? '';
        $customerContact = $_POST['customerContact'] ?? '';
        $registryGender = $_POST['registryGender'] ?? '';
        $areaSqmt = $_POST['areaSqmt'] ?? '';
        $ratePerSqmt = $_POST['ratePerSqmt'] ?? '';
        $totalAmount = $_POST['totalAmount'] ?? '';
        $discountApplicable = $_POST['discountApplicable'] ?? '';
        $discountPercent = $_POST['discountPercent'] ?? '';
        $netAmount = $_POST['netAmount'] ?? '';
        $registryAmount = $_POST['registryAmount'] ?? '';
        $serviceAmount = $_POST['serviceAmount'] ?? '';
        $maintenanceAmount = $_POST['maintenanceAmount'] ?? '';
        $miscAmount = $_POST['miscAmount'] ?? '';
        $grandTotal = $_POST['grandTotal'] ?? '';
        $constructionApplicable = $_POST['constructionApplicable'] ?? '';
        $constructionContractor = $_POST['constructionContractor'] ?? '';
        $totalAmountPayable = $_POST['totalAmountPayable'] ?? '';
        $guidelineAmount = $_POST['guidelineAmount'] ?? '';
        $registryPercent = $_POST['registryPercent'] ?? '';
        $bankAmountPayable = $_POST['bankAmountPayable'] ?? '';
        $cashAmountPayable = $_POST['cashAmountPayable'] ?? '';
        $bookingDate = $_POST['bookingDate'] ?? '';
        $constructionAmount = $_POST['constructionAmount'] ?? '';
        $remarks = $_POST['remarks'] ?? '';

        // Prepare the SQL statement
        $sql = "INSERT INTO booking (`id`, `projectName`, `blockName`, `plotNo`, `plotType`, `customerName`, `customerAddress`, `customerContact`, `registryGender`, `areaSqmt`, `ratePerSqmt`, `totalAmount`, `discountApplicable`, `discountPercent`, `netAmount`, `registryAmount`, `serviceAmount`, `maintenanceAmount`, `miscAmount`, `grandTotal`, `constructionApplicable`, `constructionContractor`, `constructionAmount`, `totalAmountPayable`, `guidelineAmount`, `registryPercent`, `bankAmountPayable`, `cashAmountPayable`, `bookingDate`, `remarks`) VALUES (NULL, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
        $stmt = $conn->prepare($sql);

        if (!$stmt) {
            throw new Exception("Error in SQL statement preparation: " . $conn->error);
        }

        // Bind parameters
        $stmt->bind_param("ssssssssssssssssssssssssss", $projectName, $blockName, $plotNo, $plotType, $customerName, $customerAddress, $customerContact, $registryGender, $areaSqmt, $ratePerSqmt, $totalAmount, $discountApplicable, $discountPercent, $netAmount, $registryAmount, $serviceAmount, $maintenanceAmount, $miscAmount, $grandTotal, $constructionApplicable, $constructionContractor, $constructionAmount, $totalAmountPayable, $guidelineAmount, $registryPercent, $bankAmountPayable, $cashAmountPayable, $bookingDate, $remarks);

        // Execute the statement
        if (!$stmt->execute()) {
            throw new Exception("Error in SQL statement execution: " . $stmt->error);
        }

        echo json_encode(["message" => "Booking added successfully"]);

        $stmt->close();
    } catch (Exception $e) {
        echo json_encode(["error" => $e->getMessage()]);
    }
} else {
    echo json_encode(["error" => "Invalid request method"]);
}

// Close connection
$conn->close();
?>



old newbookingcode
import React, { useState, useEffect } from "react";
import {
  Box,
  FormControl,
  FormLabel,
  Input,
  Select,
  Button,
  Grid,
  Center,
  HStack,
  Heading,
  GridItem,
  useToast,
} from "@chakra-ui/react";
//import { getFormSubmissionInfo } from "react-router-dom/dist/dom";

import axios from "axios";

const NewBooking = () => {
  const [projectName, setProjectName] = useState("");
  const [blockName, setBlockname] = useState("");
  const [plotName, setPlotName] = useState("");
  const [contractorName, setcontractorName] = useState("");
  const [plottype, setplottype] = useState("");
  const [registerygender, setregisterygender] = useState("");
  const [discountApplicable, setdiscountApplicable] = useState("");
  const [constructionapplicable, setconstructionapplicable] = useState("");

  const plotTypes = ["Normal", "EWS", "1BHK", "2BHK", "3BHK", "4BHK", "5BHK"]; // Replace with actual plot types
  const genders = ["Male", "Female", "Other"]; // Replace with actual gender options

  const toast = useToast();
  const [formData, setFormData] = useState({
    projectName: "",
    blockName: "",
    plotNo: "",
    plotType: "",
    customerName: "",
    customerAddress: "",
    customerContact: "",
    registryGender: "",
    areaSqft: "",
    ratePerSqmt: "",
    totalAmount: "",
    discountApplicable: "No",
    discountPercent: "",
    netAmount: "",
    registryAmount: "",
    serviceAmount: "",
    maintenanceAmount: "",
    miscAmount: "",
    grandTotal: "",
    constructionApplicable: "No",
    constructionContractor: "",
    totalAmountPayable: "",
    guidelineAmount: "",
    registryPercent: "",
    bankAmountPayable: "",
    cashAmountPayable: "",
    bookingDate: "",
    constructionAmount: "",
    remarks: "",
  });

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData((prevData) => ({ ...prevData, [name]: value }));
  };

  const onAddBook = async (e) => {
    e.preventDefault();
    const url = "https://lkgexcel.com/backend/newbooking.php";

    const fData = new FormData();
    fData.append("projectName", document.getElementById("projectName").value);
    fData.append("blockName", document.getElementById("blockName").value);
    fData.append("plotNo", document.getElementById("plotNo").value);
    fData.append("plotType", document.getElementById("plotType").value);
    fData.append("customerName", document.getElementById("customerName").value);
    fData.append(
      "customerAddress",
      document.getElementById("customerAddress").value
    );
    fData.append(
      "customerContact",
      document.getElementById("customerContact").value
    );
    fData.append(
      "registryGender",
      document.getElementById("registryGender").value
    );
    fData.append("areaSqft", document.getElementById("areaSqft").value);
    fData.append("ratePerSqft", document.getElementById("ratePerSqft").value);
    fData.append("totalAmount", document.getElementById("totalAmount").value);
    fData.append(
      "discountApplicable",
      document.getElementById("discountApplicable").value
    );
    fData.append(
      "discountPercent",
      document.getElementById("discountPercent").value
    );
    fData.append("netAmount", document.getElementById("netAmount").value);
    fData.append(
      "registryAmount",
      document.getElementById("registryAmount").value
    );
    fData.append(
      "serviceAmount",
      document.getElementById("serviceAmount").value
    );
    fData.append(
      "maintenanceAmount",
      document.getElementById("maintenanceAmount").value
    );
    fData.append("miscAmount", document.getElementById("miscAmount").value);
    fData.append("grandTotal", document.getElementById("grandTotal").value);
    fData.append(
      "constructionApplicable",
      document.getElementById("constructionApplicable").value
    );
    fData.append(
      "constructionContractor",
      document.getElementById("constructionContractor").value
    );
    fData.append(
      "totalAmountPayable",
      document.getElementById("totalAmountPayable").value
    );
    fData.append(
      "guidelineAmount",
      document.getElementById("guidelineAmount").value
    );
    fData.append(
      "registryPercent",
      document.getElementById("registryPercent").value
    );
    fData.append(
      "bankAmountPayable",
      document.getElementById("bankAmountPayable").value
    );
    fData.append(
      "cashAmountPayable",
      document.getElementById("cashAmountPayable").value
    );
    fData.append("bookingDate", document.getElementById("bookingDate").value);
    fData.append(
      "constructionAmount",
      document.getElementById("constructionAmount").value
    );
    fData.append("remarks", document.getElementById("remarks").value);

    try {
      const response = await axios.post(url, fData);
      console.log(response);
      updatePlotStatus();
      toast({
        title: "Booking added successfully!",
        status: "success",
        duration: 3000,
        isClosable: true,
        position: "top-right",
      });
    } catch (error) {
      console.log(error.response.data);
    }
  };

  const updatePlotStatus = async () => {
    const url = "https://lkgexcel.com/backend/setQuery.php";
    let query =
      "UPDATE `plot` SET `plotStatus` = 'Booked' WHERE `plotNo` = '" +
      plotName +
      "';";

    let fData = new FormData();
    fData.append("query", query);

    try {
      const response = await axios.post(url, fData);
    } catch (error) {
      console.log(error.toJSON());
    }
  };

  const [projectsData, setprojectsData] = useState([]);
  const [blockData, setblockData] = useState([]);
  const [plotData, setplotData] = useState([]);
  const [contractorData, setcontractorData] = useState([]);
  const [master, setMaster] = useState([]);

  const loadBlocks = async (pname) => {
    let query = "SELECT * FROM `block` where projectName = '" + pname + "' ;";
    // alert(query);

    const url = "https://lkgexcel.com/backend/getQuery.php";
    let fData = new FormData();

    fData.append("query", query);

    try {
      const response = await axios.post(url, fData);

      if (response && response.data) {
        if (response.data.phpresult) {
          setblockData(response.data.phpresult);
          console.log(response.data.phpresult);
        }
      }
    } catch (error) {
      console.log("Please Select Proper Input");
    }
  };

  const loadContractor = async () => {
    let query = "SELECT * FROM `contractor`;";
    // alert(query);

    const url = "https://lkgexcel.com/backend/getQuery.php";
    let fData = new FormData();

    fData.append("query", query);

    try {
      const response = await axios.post(url, fData);

      if (response && response.data) {
        if (response.data.phpresult) {
          setcontractorData(response.data.phpresult);
          console.log(response.data.phpresult);
        }
      }
    } catch (error) {
      console.log("Please Select Proper Input");
    }
  };

  const loadPlots = async (bname) => {
    let query =
      "SELECT * FROM `plot` where blockName = '" +
      bname +
      "' AND projectName ='" +
      projectName +
      "' AND plotStatus ='Available' ;";
    // alert(query);

    const url = "https://lkgexcel.com/backend/getQuery.php";
    let fData = new FormData();

    fData.append("query", query);

    try {
      const response = await axios.post(url, fData);

      if (response && response.data) {
        if (response.data.phpresult) {
          setplotData(response.data.phpresult);
          console.log(response.data.phpresult);
        }
      }
    } catch (error) {
      console.log("Please Select Proper Input");
    }
  };

  const loadProjects = async () => {
    let query = "SELECT * FROM `project`;";
    // alert(query);

    const url = "https://lkgexcel.com/backend/getQuery.php";
    let fData = new FormData();

    fData.append("query", query);

    try {
      const response = await axios.post(url, fData);

      if (response && response.data) {
        if (response.data.phpresult) {
          setprojectsData(response.data.phpresult);
          console.log(response.data.phpresult);
        }
      }
    } catch (error) {
      console.log("Please Select Proper Input");
    }
  };

  const onSelectPlot = async (pno) => {
    let query =
      "SELECT * FROM `plot` where blockName = '" +
      blockName +
      "' AND projectName ='" +
      projectName +
      "' AND plotStatus ='Available' AND plotNo='" +
      pno +
      "';";
    alert(query);

    const url = "https://lkgexcel.com/backend/getQuery.php";
    let fData = new FormData();

    fData.append("query", query);

    try {
      const response = await axios.post(url, fData);

      if (response && response.data) {
        if (response.data.phpresult) {
          console.log(response.data.phpresult);

          let query1 =
            "SELECT * FROM `master` where projectName ='" + projectName + "';";
          // alert(query);

          const url = "https://lkgexcel.com/backend/getQuery.php";
          let fData1 = new FormData();

          fData1.append("query", query1);

          const response1 = await axios.post(url, fData1);

          if (response1 && response1.data) {
            if (response1.data.phpresult) {
              setMaster(response1.data.phpresult);

              document.getElementById("registryGender").value = "Male";

              //document.getElementById('plotType').style.backgroundColor = 'gray';
              // document.getElementById('plotType').disabled = true;

              document.getElementById("areaSqft").value =
                response.data.phpresult[0]["areaSqft"];
              document.getElementById("ratePerSqmt").value =
                response.data.phpresult[0]["ratePerSqft"];
              document.getElementById("totalAmount").value =
                document.getElementById("areaSqft").value *
                document.getElementById("ratePerSqmt").value;
              document.getElementById("discountApplicable").value = "No";
              document.getElementById("discountPercent").value = "0";
              document.getElementById("netAmount").value =
                document.getElementById("totalAmount").value;
              document.getElementById("guidelineAmount").value =
                response.data.phpresult[0]["areaSqft"] *
                response1.data.phpresult[0]["guideline"];

              if (document.getElementById("registryGender").value == "Male") {
                document.getElementById("registryPercent").value =
                  response1.data.phpresult[0]["registryMalePercent"];
              }
              if (document.getElementById("registryGender").value == "Female") {
                document.getElementById("registryPercent").value =
                  response1.data.phpresult[0]["registryFemalePercent"];
              }

              document.getElementById("registryAmount").value =
                (document.getElementById("guidelineAmount").value / 100) *
                document.getElementById("registryPercent").value;
              if (response1.data.phpresult[0]["serviceType"] == "Lumpsum") {
                document.getElementById("serviceAmount").value =
                  response1.data.phpresult[0]["serviceValue"];
              }
              if (response1.data.phpresult[0]["serviceType"] == "PerSqmt") {
                document.getElementById("serviceAmount").value =
                  response1.data.phpresult[0]["serviceValue"] *
                  response.data.phpresult[0]["areaSqft"];
              }

              if (response1.data.phpresult[0]["maintenanceType"] == "Lumpsum") {
                document.getElementById("maintenanceAmount").value =
                  response1.data.phpresult[0]["maintenanceValue"];
              }
              if (response1.data.phpresult[0]["maintenanceType"] == "PerSqmt") {
                document.getElementById("maintenanceAmount").value =
                  response1.data.phpresult[0]["maintenanceValue"] *
                  response.data.phpresult[0]["areaSqft"];
              }

              if (response1.data.phpresult[0]["miscType"] == "Lumpsum") {
                document.getElementById("miscAmount").value =
                  response1.data.phpresult[0]["miscValue"];
              }
              if (response1.data.phpresult[0]["miscType"] == "PerSqmt") {
                document.getElementById("miscAmount").value =
                  response1.data.phpresult[0]["miscValue"] *
                  response.data.phpresult[0]["areaSqft"];
              }

              document.getElementById("grandTotal").value =
                parseFloat(document.getElementById("netAmount").value) +
                parseFloat(document.getElementById("registryAmount").value) +
                parseFloat(document.getElementById("serviceAmount").value) +
                parseFloat(document.getElementById("maintenanceAmount").value) +
                parseFloat(document.getElementById("miscAmount").value);

              document.getElementById("constructionApplicable").value = "No";

              if (
                document.getElementById("constructionApplicable").value == "No"
              ) {
                document.getElementById(
                  "constructionContractor"
                ).disabled = true;
                //document.getElementById('constructionContractor').style.backgroundColor = 'gray';
                document.getElementById("constructionAmount").disabled = true;
                //document.getElementById('constructionAmount').style.backgroundColor = 'gray';

                document.getElementById("totalAmountPayable").value =
                  document.getElementById("grandTotal").value;
              }
              if (
                document.getElementById("constructionApplicable").value == "Yes"
              ) {
                document.getElementById(
                  "constructionContractor"
                ).disabled = false;
                //document.getElementById('constructionContractor').style.backgroundColor = 'white';
                document.getElementById("constructionAmount").disabled = false;
                //document.getElementById('constructionAmount').style.backgroundColor = 'white';

                document.getElementById("totalAmountPayable").value =
                  parseFloat(document.getElementById("grandTotal").value) +
                  parseFloat(
                    document.getElementById("constructionAmount").value
                  );
              }

              document.getElementById("bankAmountPayable").value =
                document.getElementById("guidelineAmount").value;
              document.getElementById("cashAmountPayable").value =
                Number(document.getElementById("totalAmountPayable").value) -
                document.getElementById("guidelineAmount").value;
              setplottype(response.data.phpresult[0]["plotType"]);
            }
          }
        }
      }
    } catch (error) {
      console.log("erorrrr");
    }
  };

  const updateOnChange = () => {
    document.getElementById("totalAmount").value =
      document.getElementById("areaSqft").value *
      document.getElementById("ratePerSqmt").value;
    document.getElementById("netAmount").value =
      document.getElementById("totalAmount").value;

    if (document.getElementById("discountApplicable").value == "Yes") {
      document.getElementById("netAmount").value =
        document.getElementById("totalAmount").value -
        (document.getElementById("totalAmount").value / 100) *
          document.getElementById("discountPercent").value;
    } else if (document.getElementById("discountApplicable").value == "No") {
      document.getElementById("discountPercent").value = 0;
      document.getElementById("netAmount").value =
        document.getElementById("totalAmount").value;
    }

    document.getElementById("guidelineAmount").value =
      plotData[0]["areaSqft"] * master[0]["guideline"];

    if (document.getElementById("registryGender").value == "Male") {
      document.getElementById("registryPercent").value =
        master[0]["registryMalePercent"];
    }
    if (document.getElementById("registryGender").value == "Female") {
      document.getElementById("registryPercent").value =
        master[0]["registryFemalePercent"];
    }

    document.getElementById("registryAmount").value =
      (document.getElementById("guidelineAmount").value / 100) *
      document.getElementById("registryPercent").value;
    if (master[0]["serviceType"] == "Lumpsum") {
      document.getElementById("serviceAmount").value =
        master[0]["serviceValue"];
    }
    if (master[0]["serviceType"] == "PerSqmt") {
      document.getElementById("serviceAmount").value =
        master[0]["serviceValue"] * plotData[0]["areaSqft"];
    }

    if (master[0]["maintenanceType"] == "Lumpsum") {
      document.getElementById("maintenanceAmount").value =
        master[0]["maintenanceValue"];
    }
    if (master[0]["maintenanceType"] == "PerSqmt") {
      document.getElementById("maintenanceAmount").value =
        master[0]["maintenanceValue"] * plotData[0]["areaSqft"];
    }

    if (master[0]["miscType"] == "Lumpsum") {
      document.getElementById("miscAmount").value = master[0]["miscValue"];
    }
    if (master[0]["miscType"] == "PerSqmt") {
      document.getElementById("miscAmount").value =
        master[0]["miscValue"] * plotData[0]["areaSqft"];
    }

    document.getElementById("grandTotal").value =
      parseFloat(document.getElementById("netAmount").value) +
      parseFloat(document.getElementById("registryAmount").value) +
      parseFloat(document.getElementById("serviceAmount").value) +
      parseFloat(document.getElementById("maintenanceAmount").value) +
      parseFloat(document.getElementById("miscAmount").value);

    if (document.getElementById("constructionApplicable").value == "Yes") {
      document.getElementById("constructionContractor").disabled = false;
      //document.getElementById('constructionContractor').style.backgroundColor = 'white';
      document.getElementById("constructionAmount").disabled = false;
      //document.getElementById('constructionAmount').style.backgroundColor = 'white';

      document.getElementById("totalAmountPayable").value =
        Number(document.getElementById("grandTotal").value) +
        Number(document.getElementById("constructionAmount").value);
    }
    if (document.getElementById("constructionApplicable").value == "No") {
      document.getElementById("constructionContractor").disabled = true;
      //document.getElementById('constructionContractor').style.backgroundColor = 'gray';
      document.getElementById("constructionAmount").disabled = true;
      //document.getElementById('constructionAmount').style.backgroundColor = 'gray';

      document.getElementById("totalAmountPayable").value =
        document.getElementById("grandTotal").value;
    }

    document.getElementById("bankAmountPayable").value =
      document.getElementById("guidelineAmount").value;
    document.getElementById("cashAmountPayable").value =
      document.getElementById("totalAmountPayable").value -
      document.getElementById("guidelineAmount").value;
  };

  useEffect(() => {
    // Call the loadContractor function when the component mounts
    loadProjects();
    loadContractor();
  }, []);

  return (
    <Box p={4} width="100%" position={"relative"} bottom={"0rem"}>
      <Center pb={2}>
        <Heading fontSize={"22px"} position={"relative"} bottom={"1rem"}>
          New Booking
        </Heading>
      </Center>
      <Box position={"relative"} bottom={"1rem"}>
        <form onSubmit={onAddBook}>
          <Grid templateColumns="repeat(4, 1fr)" gap={1}>
            <FormControl colSpan={1} isRequired>
              <FormLabel>Project Name</FormLabel>
              <Select
                id="projectName"
                name="state"
                value={projectName}
                onChange={(e) => {
                  setProjectName(e.target.value);
                  loadBlocks(e.target.value);
                }}
                placeholder="Select Project"
              >
                {projectsData.map((project) => {
                  return (
                    <option
                      key={project.projectName}
                      value={project.projectName}
                    >
                      {project.projectName}
                    </option>
                  );
                })}
              </Select>
            </FormControl>

            <FormControl>
              <FormLabel>Block Name</FormLabel>
              <Select
                id="blockName"
                name="state"
                value={blockName}
                onChange={(e) => {
                  setBlockname(e.target.value);
                  loadPlots(e.target.value);
                }}
                placeholder="Select Block"
              >
                {blockData.map((block) => {
                  return (
                    <option key={block.blockName} value={block.blockName}>
                      {block.blockName}
                    </option>
                  );
                })}
              </Select>
            </FormControl>

            <FormControl>
              <FormLabel>Plot No</FormLabel>
              <Select
                id="plotNo"
                name="state"
                value={plotName}
                onChange={(e) => {
                  setPlotName(e.target.value);
                  onSelectPlot(e.target.value);
                }}
                placeholder="Select Plot No"
              >
                {plotData.map((plot) => {
                  return (
                    <option key={plot.plotNo} value={plot.plotNo}>
                      {plot.plotNo}
                    </option>
                  );
                })}
              </Select>
            </FormControl>

            <FormControl>
              <FormLabel>Plot Type</FormLabel>
              <Select
                id="plotType"
                name="plotType"
                value={plottype}
                onChange={(e) => {
                  setplottype(e.target.value);
                }}
                //onChange={handleChange}
                required
              >
                <option value="" disabled>
                  Select Plot Type
                </option>

                <option key="Normal" value="Normal">
                  Normal
                </option>
                <option key="EWS" value="EWS">
                  EWS
                </option>
                <option key="1BHK" value="1BHK">
                  1BHK
                </option>
                <option key="2BHK" value="2BHK">
                  2BHK
                </option>
                <option key="3BHK" value="3BHK">
                  3BHK
                </option>
                <option key="4BHK" value="4BHK">
                  4BHK
                </option>
                <option key="5BHK" value="5BHK">
                  5BHK
                </option>
              </Select>
            </FormControl>

            <FormControl>
              <FormLabel>Customer Name</FormLabel>
              <Input
                id="customerName"
                type="text"
                name="customerName"
                //onChange={handleChange}
                required
              />
            </FormControl>

            <FormControl>
              <FormLabel>Customer Address</FormLabel>
              <Input
                id="customerAddress"
                type="text"
                name="customerAddress"
                //onChange={handleChange}
                required
              />
            </FormControl>

            <FormControl>
              <FormLabel>Customer Contact</FormLabel>
              <Input
                id="customerContact"
                type="text"
                name="customerContact"
                //onChange={handleChange}
                required
              />
            </FormControl>

            <FormControl>
              <FormLabel>Registry Gender</FormLabel>
              <Select
                id="registryGender"
                name="registryGender"
                onChange={(e) => {
                  setregisterygender(e.target.value);
                  updateOnChange();
                }}
                //onChange={handleChange}
                required
              >
                <option value="" disabled>
                  Select Gender
                </option>
                {genders.map((gender) => (
                  <option key={gender} value={gender}>
                    {gender}
                  </option>
                ))}
              </Select>
            </FormControl>

            <FormControl>
              <FormLabel>Area Sqft</FormLabel>
              <Input
                onChange={updateOnChange}
                id="areaSqft"
                type="text"
                name="areaSqft"
                //onChange={handleChange}
                required
              />
            </FormControl>

            <FormControl>
              <FormLabel>Rate Per Sqft</FormLabel>
              <Input
                onChange={updateOnChange}
                id="ratePerSqmt"
                type="text"
                name="ratePerSqmt"
                //onChange={handleChange}
                required
              />
            </FormControl>

            <FormControl>
              <FormLabel>Total Amount</FormLabel>
              <Input
                onChange={updateOnChange}
                id="totalAmount"
                type="text"
                name="totalAmount"
                //onChange={handleChange}
                required
                bg={"yellow"}
                color={"black"}
              />
            </FormControl>
            <Box gridColumn="span 1" />
            <FormControl>
              <FormLabel>Discount Applicable</FormLabel>
              <Select
                id="discountApplicable"
                name="discountApplicable"
                onChange={(e) => {
                  setdiscountApplicable(e.target.value);
                  updateOnChange();
                }}
                //onChange={handleChange}
                required
              >
                <option value="Yes">Yes</option>
                <option value="No">No</option>
              </Select>
            </FormControl>
            <FormControl>
              <FormLabel>Discount Percent</FormLabel>
              <Input
                onChange={updateOnChange}
                id="discountPercent"
                type="text"
                name="discountPercent"
                //onChange={handleChange}
                required
              />
            </FormControl>
            <FormControl>
              <FormLabel>Net Amount</FormLabel>
              <Input
                onChange={updateOnChange}
                id="netAmount"
                type="text"
                name="netAmount"
                //onChange={handleChange}
                required
                bg={"yellow"}
              />
            </FormControl>
            <Box gridColumn="span 1" />
            <FormControl>
              <FormLabel>Registry Amount</FormLabel>
              <Input
                onChange={updateOnChange}
                id="registryAmount"
                type="text"
                name="registryAmount"
                //onChange={handleChange}
                required
              />
            </FormControl>

            <FormControl>
              <FormLabel>Service Amount</FormLabel>
              <Input
                onChange={updateOnChange}
                id="serviceAmount"
                type="text"
                name="serviceAmount"
                //onChange={handleChange}
                required
              />
            </FormControl>

            <FormControl>
              <FormLabel>Maintenance Amount</FormLabel>
              <Input
                onChange={updateOnChange}
                id="maintenanceAmount"
                type="text"
                name="maintenanceAmount"

                //onChange={handleChange}
              />
            </FormControl>
            <FormControl>
              <FormLabel>Misc Amount</FormLabel>
              <Input
                onChange={updateOnChange}
                id="miscAmount"
                type="text"
                name="miscAmount"

                //onChange={handleChange}
              />
            </FormControl>
            <FormControl>
              <FormLabel>Grand Total</FormLabel>
              <Input
                onChange={updateOnChange}
                id="grandTotal"
                type="text"
                name="grandTotal"
                //onChange={handleChange}
                bg={"yellow"}
              />
            </FormControl>
            <FormControl>
              <FormLabel>Construction Applicable</FormLabel>
              <Select
                id="constructionApplicable"
                value={constructionapplicable}
                onChange={(e) => {
                  setconstructionapplicable(e.target.value);
                  updateOnChange();
                }}
                name="constructionApplicable"
                //onChange={handleChange}
                required
              >
                <option value="Yes">Yes</option>
                <option value="No">No</option>
              </Select>
            </FormControl>
            <FormControl>
              <FormLabel>Construction Contractor</FormLabel>

              <Select
                id="constructionContractor"
                type="text"
                name="constructionContractor"
                value={contractorName}
                onChange={(e) => {
                  setcontractorName();
                }}
                placeholder="Select Contactor"
              >
                {contractorData.map((block) => {
                  return (
                    <option
                      key={block.contractorName}
                      value={block.contractorName}
                    >
                      {block.contractorName}
                    </option>
                  );
                })}
              </Select>
            </FormControl>
            <FormControl>
              <FormLabel>Construction Amount</FormLabel>
              <Input
                onChange={updateOnChange}
                id="constructionAmount"
                type="text"
                name="constructionAmount"

                //onChange={handleChange}
              />
            </FormControl>

            <FormControl>
              <FormLabel>Total Amount Payable</FormLabel>
              <Input
                onChange={updateOnChange}
                id="totalAmountPayable"
                type="text"
                name="totalAmountPayable"
                //onChange={handleChange}
                bg={"yellow"}
              />
            </FormControl>
            <FormControl>
              <FormLabel>Guideline Amount</FormLabel>
              <Input
                onChange={updateOnChange}
                id="guidelineAmount"
                type="text"
                name="guidelineAmount"

                //onChange={handleChange}
              />
            </FormControl>

            <FormControl>
              <FormLabel>Registry Percent</FormLabel>
              <Input
                onChange={updateOnChange}
                id="registryPercent"
                type="text"
                name="registryPercent"

                //onChange={handleChange}
              />
            </FormControl>
            <Box gridColumn="span 1" />
            <Box
              display="grid"
              gridAutoFlow="column"
              position={"absolute"}
              top={"100%"}
              gap={"2rem"}
            >
              <FormControl>
                <FormLabel>Bank Amount Payable</FormLabel>
                <Input
                  onChange={updateOnChange}
                  id="bankAmountPayable"
                  type="text"
                  name="bankAmountPayable"
                  //onChange={handleChange}
                  bg={"yellow"}
                />
              </FormControl>

              <FormControl>
                <FormLabel>Cash Amount Payable</FormLabel>
                <Input
                  onChange={updateOnChange}
                  id="cashAmountPayable"
                  type="text"
                  name="cashAmountPayable"
                  //onChange={handleChange}
                  bg={"yellow"}
                />
              </FormControl>

              <FormControl>
                <FormLabel>Booking Date</FormLabel>
                <Input
                  onChange={updateOnChange}
                  id="bookingDate"
                  type="date"
                  name="bookingDate"
                  //onChange={handleChange}
                  required
                />
              </FormControl>
              <FormControl>
                <FormLabel>Remarks</FormLabel>
                <Input
                  onChange={updateOnChange}
                  id="remarks"
                  type="text"
                  name="remarks"
                  //onChange={handleChange}
                  required
                />
              </FormControl>

              <Button colorScheme="blue" type="submit" mt={8}>
                Submit
              </Button>
            </Box>
          </Grid>
        </form>
      </Box>
    </Box>
  );
};

export default NewBooking;




//addplot code 
import React, { useState, useEffect } from "react";
import {
  Box,
  Grid,
  FormControl,
  FormLabel,
  Input,
  Select,
  Button,
  Center,
  Heading,
  useToast,
  Table,
  Thead,
  Tr,
  HStack,
  Td,
  Tbody,
  Th,
  VStack,
  Modal,
  ModalOverlay,
  ModalContent,
  ModalHeader,
  ModalFooter,
  ModalBody,
  ModalCloseButton,
} from "@chakra-ui/react";
import axios from "axios";
import DeleteConfirmationDialog from "./DeleteConfirmationDialog";

import PaginationControl from "./PaginationControl";
const AddPlot = () => {
  const toast = useToast();
  const [currentPage, setCurrentPage] = useState(1);
  const itemsPerPage = 100; // Set the number of items per page according to your preference
  const [isDeleteDialogOpen, setIsDeleteDialogOpen] = useState(false);
  const [projectIdToDelete, setProjectIdToDelete] = useState(null);
  const [totalItems, setTotalItems] = useState(0);
  const [searchQuery, setSearchQuery] = useState("");
  const [filteredMaster, setFilteredMaster] = useState([]);
  const [projects, setProjects] = useState([]);
  const [getblock, setBlock] = useState([]);
  const [plot, setPlot] = useState([]);

  const [formData, setFormData] = useState({
    projectName: "",
    blockName: "",
    plotNo: "",
    areaSqft: "",
    areaSqmt: "",
    ratePerSqft: "",
    plotType: "",
    plotStatus: "Available",
  });

  //get project name only
  const fetchDataProject = async () => {
    try {
      const response = await axios.get(
        "https://lkgexcel.com/backend/getprojects.php"
      );
      setProjects(response.data);
    } catch (error) {
      console.error("Error fetching data:", error);
    }
  };
  const fetchDataBlock = async () => {
    try {
      const response = await axios.get(
        "https://lkgexcel.com/backend/getblock.php"
      );
      setBlock(response.data);
    } catch (error) {
      console.error("Error fetching data:", error);
    }
  };
  const fetchDataPlot = async () => {
    try {
      const response = await axios.get(
        "https://lkgexcel.com/backend/getplot.php"
      );
      setPlot(response.data);
    } catch (error) {
      console.error("Error fetching data:", error);
    }
  };
  useEffect(() => {
    fetchDataProject();
    fetchDataPlot();
    fetchDataBlock();
  }, []);

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData((prevData) => ({ ...prevData, [name]: value }));
  };

  const onAddPlot = async (e) => {
    e.preventDefault();

    const url = "https://lkgexcel.com/backend/addplot.php";
    const fData = new FormData();
    fData.append("projectName", formData.projectName);
    fData.append("blockName", formData.blockName);
    fData.append("plotNo", formData.plotNo);
    fData.append("areaSqft", formData.areaSqft);
    fData.append("areaSqmt", formData.areaSqmt);
    fData.append("ratePerSqft", formData.ratePerSqft);
    fData.append("plotType", formData.plotType);
    fData.append("plotStatus", formData.plotStatus);

    try {
      const response = await axios.post(url, fData);
      toast({
        title: "Plot added successfully!",
        status: "success",
        duration: 3000,
        isClosable: true,
      });
      console.log(response);
      // Clear the form data after successful submission
      setFormData({
        projectName: "",
        blockName: "",
        plotNo: "",
        areaSqft: "",
        areaSqmt: "",
        ratePerSqft: "",
        plotType: "",
        plotStatus: "Available",
      });

      // Fetch updated plot data
    } catch (error) {
      console.log(error.toJSON());
    }
  };

  useEffect(() => {
    fetchDataPlot();
  }, [onAddPlot]);

  // ...
  useEffect(() => {
    const filteredData = plot.filter((item) =>
      item.projectName.toLowerCase().includes(searchQuery.toLowerCase())
    );

    const sortedData = [...filteredData].sort((a, b) => b.id - a.id);

    setFilteredMaster(sortedData);
    setTotalItems(sortedData.length);
  }, [plot, searchQuery]);

  const indexOfLastItem = currentPage * itemsPerPage;
  const indexOfFirstItem = indexOfLastItem - itemsPerPage;
  const currentItems = filteredMaster.slice(indexOfFirstItem, indexOfLastItem);

  const changePage = (newPage) => {
    setCurrentPage(newPage);
  };

  const handleDelete = (projectId) => {
    setProjectIdToDelete(projectId);
    setIsDeleteDialogOpen(true);
  };

  const confirmDelete = async () => {
    try {
      // Make a DELETE request to your API endpoint for deleting a project
      await axios.delete(
        `https://lkgexcel.com/backend/deleteplot.php?id=${projectIdToDelete}`
      );
      // Update the projects state after successful deletion
      setPlot(plot.filter((project) => project.id !== projectIdToDelete));
      toast({
        title: "Project deleted successfully!",
        // status: "danger",
        duration: 3000,
        position: "top",
        isClosable: true,
      });
    } catch (error) {
      console.error("Error deleting project:", error);
    } finally {
      // Reset the state after handling delete
      setIsDeleteDialogOpen(false);
      setProjectIdToDelete(null);
    }
  };
  //modal edit functions
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [editFormData, setEditFormData] = useState({
    projectName: "",
    blockName: "",
    plotNo: "",
    areaSqft: "",
    areaSqmt: "",
    ratePerSqft: "",
    plotType: "",
    plotStatus: "Available",
  });
  const [matchCase, setmatchCase] = useState("");
  // console.log(formData);

  const handleEditPlotChange = (e) => {
    const { name, value } = e.target;
    setEditFormData((prevData) => ({ ...prevData, [name]: value }));
  };
  useEffect(() => {
    let valueMatch = getblock.find(
      (i) =>
        i.blockName === formData.blockName &&
        i.projectName === formData.projectName
    );
    setmatchCase(valueMatch);

    // Update initial values for areaSqft, areaSqmt, and ratePerSqft
    setFormData((prevData) => ({
      ...prevData,
      areaSqft: valueMatch ? valueMatch.areaSqft : "",
      areaSqmt: valueMatch ? valueMatch.areaSqmt : "",
      ratePerSqft: valueMatch ? valueMatch.ratePerSqft : "",
    }));
  }, [formData.blockName, formData.projectName, getblock]);
  // console.log(matchCase);
  const handleEditPlotSubmit = async (e) => {
    e.preventDefault();

    const url = "https://lkgexcel.com/backend/editplot.php";
    const formData = new FormData();

    // Append the edited plot data to the formData object
    formData.append("id", editFormData.id);
    formData.append("projectName", editFormData.projectName);
    formData.append("blockName", editFormData.blockName);
    formData.append("plotNo", editFormData.plotNo);
    formData.append("areaSqft", editFormData.areaSqft);
    formData.append("areaSqmt", editFormData.areaSqmt);
    formData.append("ratePerSqft", editFormData.ratePerSqft);
    formData.append("plotType", editFormData.plotType);
    formData.append("plotStatus", editFormData.plotStatus);

    try {
      const response = await axios.post(url, formData);

      if (response && response.data && response.data.status === "success") {
        // Handle success, e.g., fetch updated data, show a toast
        console.log("Plot updated successfully:", response.data.message);

        toast({
          title: "Plot updated successfully!",
          status: "success",
          duration: 3000,
          isClosable: true,
        });

        // Close the modal after successful edit
        setIsModalOpen(false);

        // Implement any additional logic you need here
      } else {
        // Handle error response
        console.error("Error updating plot:", response.data.message);

        toast({
          title: "Error updating plot",
          status: "error",
          duration: 3000,
          isClosable: true,
        });

        // Still close the modal in case of an error
        setIsModalOpen(false);
      }
    } catch (error) {
      // Handle network or other errors
      console.error("Error in handleEditPlotSubmit:", error);

      toast({
        title: "Error updating plot",
        status: "error",
        duration: 3000,
        isClosable: true,
      });

      // Still close the modal in case of an error
      setIsModalOpen(false);
    }
  };

  return (
    <>
      <Box p={4} width="100%">
        <Center pb={4}>
          <Heading fontSize={"25px"}>Add Plot </Heading>
        </Center>
        <form onSubmit={onAddPlot}>
          <Grid templateColumns="repeat(5, 1fr)" gap={4}>
            <FormControl>
              <FormLabel>Project Name</FormLabel>
              <Select
                name="projectName"
                value={formData.projectName}
                onChange={handleChange}
                placeholder="Select Project"
                required
              >
                {projects.map((project) => (
                  <option key={project.id} value={project.projectName}>
                    {project.projectName}
                  </option>
                ))}
              </Select>
            </FormControl>

            <FormControl>
              <FormLabel>Block Name</FormLabel>
              <Select
                name="blockName"
                value={formData.blockName}
                onChange={handleChange}
                placeholder="Select Block"
                required
              >
                {getblock.map((block) => (
                  <option key={block.id} value={block.blockName}>
                    {block.blockName}
                  </option>
                ))}
              </Select>
            </FormControl>

            <FormControl>
              <FormLabel>Plot No</FormLabel>
              <Input
                type="text"
                name="plotNo"
                value={formData.plotNo}
                onChange={handleChange}
                placeholder="Enter Plot No"
                required
              />
            </FormControl>

            <FormControl>
              <FormLabel>Area (in sqft)</FormLabel>
              <Input
                type="number"
                name="areaSqft"
                value={matchCase ? matchCase.areaSqft : formData.areaSqft}
                onChange={handleChange}
                placeholder="Enter Area (sqft)"
                required
                border={matchCase ? "2px solid green" : "1px solid #E5EAEF"}
              />
            </FormControl>

            <FormControl>
              <FormLabel>Area (in sqmt)</FormLabel>
              <Input
                type="number"
                name="areaSqmt"
                value={matchCase ? matchCase.areaSqmt : formData.areaSqmt}
                // value={formData.areaSqmt}
                onChange={handleChange}
                placeholder="Enter Area (sqmt)"
                required
                border={matchCase ? "2px solid green" : "1px solid #E5EAEF"}
              />
            </FormControl>

            <FormControl>
              <FormLabel>Rate (per sqft)</FormLabel>
              <Input
                type="number"
                name="ratePerSqft"
                value={matchCase ? matchCase.ratePerSqft : formData.ratePerSqft}
                onChange={handleChange}
                placeholder="Enter Rate (per sqft)"
                required
                border={matchCase ? "2px solid green" : "1px solid #E5EAEF"}
              />
            </FormControl>

            <FormControl gridColumn="span 1">
              <FormLabel>Plot Type</FormLabel>
              <Select
                name="plotType"
                value={formData.plotType}
                onChange={handleChange}
                placeholder="Select Plot Type"
                required
              >
                {/* Populate the dropdown with plot types */}
                <option value="Normal">Normal</option>
                <option value="EWS">EWS</option>
                <option value="1BHK">1BHK</option>
                <option value="2BHK">2BHK</option>
                <option value="3BHK">3BHK</option>
                <option value="4BHK">4BHK</option>
                <option value="5BHK">5BHK</option>

                {/* Add more options as needed */}
              </Select>
            </FormControl>
            <FormControl>
              <FormLabel>Plot Status</FormLabel>
              <Select
                name="plotStatus"
                value={formData.plotStatus}
                onChange={handleChange}
                placeholder="Select Plot Status"
                required
              >
                <option value="Available">Available</option>
              </Select>
            </FormControl>
            <Button colorScheme="blue" type="submit" mt={8}>
              Add Plot
            </Button>
          </Grid>
          <Center></Center>
        </form>
      </Box>
      <Box>
        <Center mb={"15px"}>
          <VStack>
            <Heading fontSize={"25px"}>Plot Details</Heading>
            <Input
              type="text"
              w={"100%"}
              placeholder="Search by Project Name"
              value={searchQuery}
              onChange={(e) => setSearchQuery(e.target.value)}
            />
            <PaginationControl
              changePage={changePage}
              page={currentPage}
              total={totalItems}
              limit={itemsPerPage}
            />
          </VStack>
        </Center>
        <Table variant="simple" colorScheme="blue">
          <Thead>
            <Tr>
              <Th bg="blue.500" color="white" fontSize="13px">
                ID
              </Th>
              <Th bg="blue.500" color="white" fontSize="13px">
                Project Name
              </Th>
              <Th bg="blue.500" color="white" fontSize="13px">
                Block Name
              </Th>
              <Th bg="blue.500" color="white" fontSize="13px">
                Plot No.
              </Th>
              <Th bg="blue.500" color="white" fontSize="13px">
                Area sqft
              </Th>
              <Th bg="blue.500" color="white" fontSize="13px">
                Area sqmt
              </Th>
              <Th bg="blue.500" color="white" fontSize="13px">
                Rate PerSqft
              </Th>
              <Th bg="blue.500" color="white" fontSize="13px">
                Plot Type
              </Th>{" "}
              <Th bg="blue.500" color="white" fontSize="14px">
                Action
              </Th>
            </Tr>
          </Thead>
          <Tbody>
            {currentItems.map((plotItem) => (
              <Tr key={plotItem.id}>
                <Td>{plotItem.id}</Td>
                <Td>{plotItem.projectName}</Td>
                <Td>{plotItem.blockName}</Td>
                <Td>{plotItem.plotNo}</Td>

                <Td>{plotItem.areaSqft}</Td>
                <Td>{plotItem.areaSqmt}</Td>
                <Td>{plotItem.ratePerSqft}</Td>
                <Td>{plotItem.plotType}</Td>

                <Td>
                  <HStack>
                    <Button
                      colorScheme="red"
                      onClick={() => handleDelete(plotItem.id)}
                    >
                      Delete
                    </Button>
                    <DeleteConfirmationDialog
                      isOpen={isDeleteDialogOpen}
                      onClose={() => setIsDeleteDialogOpen(false)}
                      onConfirm={confirmDelete}
                    />
                    <Button
                      colorScheme="teal"
                      onClick={() => {
                        setIsModalOpen(true);
                        setEditFormData({
                          id: plotItem.id,
                          projectName: plotItem.projectName,
                          blockName: plotItem.blockName,
                          areaSqft: plotItem.areaSqft,
                          areaSqmt: plotItem.areaSqmt,
                          ratePerSqft: plotItem.ratePerSqft,
                          plotType: plotItem.plotType,
                          plotStatus: plotItem.plotStatus,
                        });
                      }}
                    >
                      Edit
                    </Button>
                  </HStack>
                </Td>
              </Tr>
            ))}
          </Tbody>
        </Table>
      </Box>
      <Modal isOpen={isModalOpen} onClose={() => setIsModalOpen(false)}>
        <ModalOverlay />
        <ModalContent>
          <ModalHeader>Edit Block</ModalHeader>
          <ModalCloseButton />
          <form onSubmit={handleEditPlotSubmit}>
            <ModalBody>
              <FormControl mb={4}>
                <FormLabel>Project Name</FormLabel>
                <Select
                  name="projectName"
                  value={editFormData.projectName || ""}
                  onChange={handleEditPlotChange}
                  placeholder="Select Project"
                >
                  {projects.map((project) => (
                    <option key={project.id} value={project.projectName}>
                      {project.projectName}
                    </option>
                  ))}
                </Select>
              </FormControl>
              <FormControl mb={4}>
                <FormLabel>Block Name</FormLabel>
                <Select
                  name="blockName"
                  value={editFormData.blockName}
                  onChange={handleEditPlotChange}
                  placeholder="Select Block"
                  required
                >
                  {getblock.map((block) => (
                    <option key={block.id} value={block.blockName}>
                      {block.blockName}
                    </option>
                  ))}
                </Select>
              </FormControl>
              <FormControl mb={4}>
                <FormLabel>Plot No.</FormLabel>
                <Input
                  type="text"
                  name="plotNo"
                  value={editFormData.plotNo || ""}
                  onChange={handleEditPlotChange}
                  required
                />
              </FormControl>
              <FormControl mb={4}>
                <FormLabel>Area (in sqft)</FormLabel>
                <Input
                  type="number"
                  name="areaSqft"
                  value={editFormData.areaSqft || ""}
                  onChange={handleEditPlotChange}
                  required
                />
              </FormControl>
              <FormControl mb={4}>
                <FormLabel>Area (in sqmt)</FormLabel>
                <Input
                  type="number"
                  name="areaSqmt"
                  value={editFormData.areaSqmt || ""}
                  onChange={handleEditPlotChange}
                  required
                />
              </FormControl>
              <FormControl mb={4}>
                <FormLabel>Rate (per sqft)</FormLabel>
                <Input
                  type="number"
                  name="ratePerSqft"
                  value={editFormData.ratePerSqft || ""}
                  onChange={handleEditPlotChange}
                  required
                />
              </FormControl>
              <FormControl>
                <FormLabel>Plot Type</FormLabel>
                <Select
                  name="plotType"
                  value={editFormData.plotType}
                  onChange={handleEditPlotChange}
                  placeholder="Select Plot Type"
                  required
                >
                  {/* Populate the dropdown with plot types */}
                  <option value="Normal">Normal</option>
                  <option value="EWS">EWS</option>
                  {/* Add more options as needed */}
                </Select>
              </FormControl>
              <FormControl>
                <FormLabel>Plot Status</FormLabel>
                <Select
                  name="plotStatus"
                  value={editFormData.plotStatus}
                  onChange={handleEditPlotChange}
                  placeholder="Select Plot Status"
                  required
                >
                  <option value="Available">Available</option>
                  <option value="Not Available">Not Available</option>
                </Select>
              </FormControl>
            </ModalBody>
            <ModalFooter>
              <Button colorScheme="blue" type="submit">
                Save Changes
              </Button>
              <Button onClick={() => setIsModalOpen(false)} ml={4}>
                Cancel
              </Button>
            </ModalFooter>
          </form>
        </ModalContent>
      </Modal>
    </>
  );
};

export default AddPlot;





// const toast = useToast();
  // const [currentPage, setCurrentPage] = useState(1);
  // const itemsPerPage = 100; // Set the number of items per page according to your preference
  // const [isDeleteDialogOpen, setIsDeleteDialogOpen] = useState(false);
  // const [projectIdToDelete, setProjectIdToDelete] = useState(null);
  // const [totalItems, setTotalItems] = useState(0);
  // const [searchQuery, setSearchQuery] = useState("");
  // const [filteredMaster, setFilteredMaster] = useState([]);
  // const [projects, setProjects] = useState([]);
  // const [getblock, setBlock] = useState([]);
  // const [plot, setPlot] = useState([]);

  // const [formData, setFormData] = useState({
  //   projectName: "",
  //   blockName: "",
  //   plotNo: "",
  //   areaSqft: "",
  //   areaSqmt: "",
  //   ratePerSqft: "",
  //   plotType: "",
  //   plotStatus: "Available",
  // });

  // //get project name only
  // const fetchDataProject = async () => {
  //   try {
  //     const response = await axios.get(
  //       "https://lkgexcel.com/backend/getprojects.php"
  //     );
  //     setProjects(response.data);
  //   } catch (error) {
  //     console.error("Error fetching data:", error);
  //   }
  // };
  // const fetchDataBlock = async () => {
  //   try {
  //     const response = await axios.get(
  //       "https://lkgexcel.com/backend/getblock.php"
  //     );
  //     setBlock(response.data);
  //   } catch (error) {
  //     console.error("Error fetching data:", error);
  //   }
  // };
  // const fetchDataPlot = async () => {
  //   try {
  //     const response = await axios.get(
  //       "https://lkgexcel.com/backend/getplot.php"
  //     );
  //     setPlot(response.data);
  //   } catch (error) {
  //     console.error("Error fetching data:", error);
  //   }
  // };
  // useEffect(() => {
  //   fetchDataProject();
  //   fetchDataPlot();
  //   fetchDataBlock();
  // }, []);

  // const handleChange = (e) => {
  //   const { name, value } = e.target;
  //   setFormData((prevData) => ({ ...prevData, [name]: value }));
  // };

  // const onAddPlot = async (e) => {
  //   e.preventDefault();

  //   const url = "https://lkgexcel.com/backend/addplot.php";
  //   const fData = new FormData();
  //   fData.append("projectName", formData.projectName);
  //   fData.append("blockName", formData.blockName);
  //   fData.append("plotNo", formData.plotNo);
  //   fData.append("areaSqft", formData.areaSqft);
  //   fData.append("areaSqmt", formData.areaSqmt);
  //   fData.append("ratePerSqft", formData.ratePerSqft);
  //   fData.append("plotType", formData.plotType);
  //   fData.append("plotStatus", formData.plotStatus);

  //   try {
  //     const response = await axios.post(url, fData);
  //     toast({
  //       title: "Plot added successfully!",
  //       status: "success",
  //       duration: 3000,
  //       isClosable: true,
  //     });
  //     console.log(response);
  //     // Clear the form data after successful submission
  //     setFormData({
  //       projectName: "",
  //       blockName: "",
  //       plotNo: "",
  //       areaSqft: "",
  //       areaSqmt: "",
  //       ratePerSqft: "",
  //       plotType: "",
  //       plotStatus: "Available",
  //     });

  //     // Fetch updated plot data
  //   } catch (error) {
  //     console.log(error.toJSON());
  //   }
  // };

  // useEffect(() => {
  //   fetchDataPlot();
  // }, [onAddPlot]);

  // // ...
  // useEffect(() => {
  //   const filteredData = plot.filter((item) =>
  //     item.projectName.toLowerCase().includes(searchQuery.toLowerCase())
  //   );

  //   const sortedData = [...filteredData].sort((a, b) => b.id - a.id);

  //   setFilteredMaster(sortedData);
  //   setTotalItems(sortedData.length);
  // }, [plot, searchQuery]);

  // const indexOfLastItem = currentPage * itemsPerPage;
  // const indexOfFirstItem = indexOfLastItem - itemsPerPage;
  // const currentItems = filteredMaster.slice(indexOfFirstItem, indexOfLastItem);

  // const changePage = (newPage) => {
  //   setCurrentPage(newPage);
  // };

  // const handleDelete = (projectId) => {
  //   setProjectIdToDelete(projectId);
  //   setIsDeleteDialogOpen(true);
  // };

  // const confirmDelete = async () => {
  //   try {
  //     // Make a DELETE request to your API endpoint for deleting a project
  //     await axios.delete(
  //       `https://lkgexcel.com/backend/deleteplot.php?id=${projectIdToDelete}`
  //     );
  //     // Update the projects state after successful deletion
  //     setPlot(plot.filter((project) => project.id !== projectIdToDelete));
  //     toast({
  //       title: "Project deleted successfully!",
  //       // status: "danger",
  //       duration: 3000,
  //       position: "top",
  //       isClosable: true,
  //     });
  //   } catch (error) {
  //     console.error("Error deleting project:", error);
  //   } finally {
  //     // Reset the state after handling delete
  //     setIsDeleteDialogOpen(false);
  //     setProjectIdToDelete(null);
  //   }
  // };
  // //modal edit functions
  // const [isModalOpen, setIsModalOpen] = useState(false);
  // const [editFormData, setEditFormData] = useState({
  //   projectName: "",
  //   blockName: "",
  //   plotNo: "",
  //   areaSqft: "",
  //   areaSqmt: "",
  //   ratePerSqft: "",
  //   plotType: "",
  //   plotStatus: "Available",
  // });
  // const [matchCase, setmatchCase] = useState("");
  // // console.log(formData);

  // const handleEditPlotChange = (e) => {
  //   const { name, value } = e.target;
  //   setEditFormData((prevData) => ({ ...prevData, [name]: value }));
  // };
  // useEffect(() => {
  //   let valueMatch = getblock.find(
  //     (i) =>
  //       i.blockName === formData.blockName &&
  //       i.projectName === formData.projectName
  //   );
  //   setmatchCase(valueMatch);

  //   // Update initial values for areaSqft, areaSqmt, and ratePerSqft
  //   setFormData((prevData) => ({
  //     ...prevData,
  //     areaSqft: valueMatch ? valueMatch.areaSqft : "",
  //     areaSqmt: valueMatch ? valueMatch.areaSqmt : "",
  //     ratePerSqft: valueMatch ? valueMatch.ratePerSqft : "",
  //   }));
  // }, [formData.blockName, formData.projectName, getblock]);
  // // console.log(matchCase);
  // const handleEditPlotSubmit = async (e) => {
  //   e.preventDefault();

  //   const url = "https://lkgexcel.com/backend/editplot.php";
  //   const formData = new FormData();

  //   // Append the edited plot data to the formData object
  //   formData.append("id", editFormData.id);
  //   formData.append("projectName", editFormData.projectName);
  //   formData.append("blockName", editFormData.blockName);
  //   formData.append("plotNo", editFormData.plotNo);
  //   formData.append("areaSqft", editFormData.areaSqft);
  //   formData.append("areaSqmt", editFormData.areaSqmt);
  //   formData.append("ratePerSqft", editFormData.ratePerSqft);
  //   formData.append("plotType", editFormData.plotType);
  //   formData.append("plotStatus", editFormData.plotStatus);

  //   try {
  //     const response = await axios.post(url, formData);

  //     if (response && response.data && response.data.status === "success") {
  //       // Handle success, e.g., fetch updated data, show a toast
  //       console.log("Plot updated successfully:", response.data.message);

  //       toast({
  //         title: "Plot updated successfully!",
  //         status: "success",
  //         duration: 3000,
  //         isClosable: true,
  //       });

  //       // Close the modal after successful edit
  //       setIsModalOpen(false);

  //       // Implement any additional logic you need here
  //     } else {
  //       // Handle error response
  //       console.error("Error updating plot:", response.data.message);

  //       toast({
  //         title: "Error updating plot",
  //         status: "error",
  //         duration: 3000,
  //         isClosable: true,
  //       });

  //       // Still close the modal in case of an error
  //       setIsModalOpen(false);
  //     }
  //   } catch (error) {
  //     // Handle network or other errors
  //     console.error("Error in handleEditPlotSubmit:", error);

  //     toast({
  //       title: "Error updating plot",
  //       status: "error",
  //       duration: 3000,
  //       isClosable: true,
  //     });

  //     // Still close the modal in case of an error
  //     setIsModalOpen(false);
  //   }
  // };const toast = useToast();
    /* 
  const onAddBook = async (e) => {

    e.preventDefault();
    const url = "https://lkgexcel.com/backend/newbooking.php";

    const fData = new FormData();
    fData.append("projectName", document.getElementById("projectName").value);
    fData.append("blockName", document.getElementById("blockName").value);
    fData.append("plotNo", document.getElementById("plotNo").value);
    fData.append("plotType", document.getElementById("plotType").value);
    fData.append("customerName", document.getElementById("customerName").value);
    fData.append(
      "customerAddress",
      document.getElementById("customerAddress").value
    );
    fData.append(
      "customerContact",
      document.getElementById("customerContact").value
    );
    fData.append(
      "registryGender",
      document.getElementById("registryGender").value
    );
    fData.append("areaSqmt", document.getElementById("areaSqmt").value);
    fData.append("ratePerSqmt", document.getElementById("ratePerSqmt").value);
    fData.append("totalAmount", document.getElementById("totalAmount").value);
    fData.append(
      "discountApplicable",
      document.getElementById("discountApplicable").value
    );
    fData.append(
      "discountPercent",
      document.getElementById("discountPercent").value
    );
    fData.append("netAmount", document.getElementById("netAmount").value);
    fData.append(
      "registryAmount",
      document.getElementById("registryAmount").value
    );
    fData.append(
      "serviceAmount",
      document.getElementById("serviceAmount").value
    );
    fData.append(
      "maintenanceAmount",
      document.getElementById("maintenanceAmount").value
    );
    fData.append("miscAmount", document.getElementById("miscAmount").value);
    fData.append("grandTotal", document.getElementById("grandTotal").value);
    fData.append(
      "constructionApplicable",
      document.getElementById("constructionApplicable").value
    );
    fData.append(
      "constructionContractor",
      document.getElementById("constructionContractor").value
    );
    fData.append(
      "totalAmountPayable",
      document.getElementById("totalAmountPayable").value
    );
    fData.append(
      "guidelineAmount",
      document.getElementById("guidelineAmount").value
    );
    fData.append(
      "registryPercent",
      document.getElementById("registryPercent").value
    );
    fData.append(
      "bankAmountPayable",
      document.getElementById("bankAmountPayable").value
    );
    fData.append(
      "cashAmountPayable",
      document.getElementById("cashAmountPayable").value
    );
    fData.append("bookingDate", document.getElementById("bookingDate").value);
    fData.append(
      "constructionAmount",
      document.getElementById("constructionAmount").value
    );
    fData.append("remarks", document.getElementById("remarks").value);

    try {
      const response = await axios.post(url, fData);
      console.log(response);
      updatePlotStatus();
      toast({
        title: "Booking added successfully!",
        status: "success",
        duration: 3000,
        isClosable: true,
        position: "top-right",
      });
      // Clear the form data after successful submission
     
    } catch (error) {
      console.log(error.toJSON());
    }
  };
 */

  /*   const onAddBook = async () =>{

    const url = "https://lkgexcel.com/backend/setQuery.php";
   let query="INSERT INTO booking (id, projectName, blockName, plotNo, plotType, customerName, customerAddress, customerContact, registryGender, areaSqft, rateAreaSqft, totalAmount, discountApplicable, discountPercent, netAmount, registryAmount, serviceAmount, maintenanceAmount, miscAmount, grandTotal, constructionApplicable, constructionContractor, constructionAmount, totalAmountPayable, guidelineAmount, registryPercent, bankAmountPayable, bookingDate, cashAmountPayable, remarks, registryDate) VALUES (NULL, '"+document.getElementById("projectName").value+"', '"+document.getElementById("blockName").value+"', '"+document.getElementById("plotNo").value+"', '"+document.getElementById("plotType").value+"', '"+document.getElementById("customerName").value+"', '"+document.getElementById("customerAddress").value+"', '"+document.getElementById("customerContact").value+"', '"+document.getElementById("registryGender").value+"', '"+document.getElementById("areaSqmt").value+"', '"+document.getElementById("ratePerSqmt").value+"', '"+document.getElementById("totalAmount").value+"', '"+document.getElementById("discountApplicable").value+"', '"+document.getElementById("discountPercent").value+"', '"+document.getElementById("netAmount").value+"', '"+document.getElementById("registryAmount").value+"', '"+document.getElementById("serviceAmount").value+"', '"+document.getElementById("maintenanceAmount").value+"', '"+document.getElementById("miscAmount").value+"', '"+document.getElementById("grandTotal").value+"', '"+document.getElementById("constructionApplicable").value+"', '"+document.getElementById("constructionContractor").value+"', '"+document.getElementById("constructionAmount").value+"', '"+document.getElementById("totalAmountPayable").value+"', '"+document.getElementById("guidelineAmount").value+"', '"+document.getElementById("registryPercent").value+"', '"+document.getElementById("bankAmountPayable").value+"', '"+document.getElementById("bookingDate").value+"', '"+document.getElementById("cashAmountPayable").value+"', '"+document.getElementById("remarks").value+"', '');";
      alert(query)
      let fData = new FormData();
      fData.append("query", query);
  
      try {
        const response = await axios.post(url, fData);
        toast({
          title: "Booking added successfully!",
          status: "success",
          duration: 3000,
          position: "top",
          isClosable: true,
        });
    //    loadContractor();
      
     
  
        // Clear the form data after successful submission
     
      } catch (error) {
        console.log(error.toJSON());
      }
    }
 */
// import React, { useState, useEffect } from "react";
// import {
//   Box,
//   FormControl,
//   FormLabel,
//   Input,
//   Select,
//   Button,
//   Grid,
//   Center,
//   HStack,
//   Heading,
//   GridItem,
//   useToast,
// } from "@chakra-ui/react";
// //import { getFormSubmissionInfo } from "react-router-dom/dist/dom";

// import axios from "axios";

// const NewBooking = () => {
//   const [projectName, setProjectName] = useState("");
//   const [blockName, setBlockname] = useState("");
//   const [plotName, setPlotName] = useState("");
//   const [contractorName, setcontractorName] = useState("");
//   const [plottype, setplottype] = useState("");
//   const [registerygender, setregisterygender] = useState("");
//   const [discountApplicable, setdiscountApplicable] = useState("");
//   const [constructionapplicable, setconstructionapplicable] = useState("");

//   const plotTypes = ["Normal", "EWS", "1BHK", "2BHK", "3BHK", "4BHK", "5BHK"]; // Replace with actual plot types
//   const genders = ["Male", "Female", "Other"]; // Replace with actual gender options

//   const toast = useToast();
//   const [formData, setFormData] = useState({
//     projectName: "",
//     blockName: "",
//     plotNo: "",
//     plotType: "",
//     customerName: "",
//     customerAddress: "",
//     customerContact: "",
//     registryGender: "",
//     areaSqmt: "",
//     ratePerSqmt: "",
//     totalAmount: "",
//     discountApplicable: "No",
//     discountPercent: "",
//     netAmount: "",
//     registryAmount: "",
//     serviceAmount: "",
//     maintenanceAmount: "",
//     miscAmount: "",
//     grandTotal: "",
//     constructionApplicable: "No",
//     constructionContractor: "",
//     totalAmountPayable: "",
//     guidelineAmount: "",
//     registryPercent: "",
//     bankAmountPayable: "",
//     cashAmountPayable: "",
//     bookingDate: "",
//     constructionAmount: "",
//     remarks: "",
//   });

//   const handleChange = (e) => {
//     const { name, value } = e.target;
//     setFormData((prevData) => ({ ...prevData, [name]: value }));
//   };

//   const onAddBook = async (e) => {
//     e.preventDefault();
//     const url = "https://lkgexcel.com/backend/newbooking.php";

//     const fData = new FormData();
//     fData.append("projectName", document.getElementById("projectName").value);
//     fData.append("blockName", document.getElementById("blockName").value);
//     fData.append("plotNo", document.getElementById("plotNo").value);
//     fData.append("plotType", document.getElementById("plotType").value);
//     fData.append("customerName", document.getElementById("customerName").value);
//     fData.append(
//       "customerAddress",
//       document.getElementById("customerAddress").value
//     );
//     fData.append(
//       "customerContact",
//       document.getElementById("customerContact").value
//     );
//     fData.append(
//       "registryGender",
//       document.getElementById("registryGender").value
//     );
//     fData.append("areaSqmt", document.getElementById("areaSqmt").value);
//     fData.append("ratePerSqmt", document.getElementById("ratePerSqmt").value);
//     fData.append("totalAmount", document.getElementById("totalAmount").value);
//     fData.append(
//       "discountApplicable",
//       document.getElementById("discountApplicable").value
//     );
//     fData.append(
//       "discountPercent",
//       document.getElementById("discountPercent").value
//     );
//     fData.append("netAmount", document.getElementById("netAmount").value);
//     fData.append(
//       "registryAmount",
//       document.getElementById("registryAmount").value
//     );
//     fData.append(
//       "serviceAmount",
//       document.getElementById("serviceAmount").value
//     );
//     fData.append(
//       "maintenanceAmount",
//       document.getElementById("maintenanceAmount").value
//     );
//     fData.append("miscAmount", document.getElementById("miscAmount").value);
//     fData.append("grandTotal", document.getElementById("grandTotal").value);
//     fData.append(
//       "constructionApplicable",
//       document.getElementById("constructionApplicable").value
//     );
//     fData.append(
//       "constructionContractor",
//       document.getElementById("constructionContractor").value
//     );
//     fData.append(
//       "totalAmountPayable",
//       document.getElementById("totalAmountPayable").value
//     );
//     fData.append(
//       "guidelineAmount",
//       document.getElementById("guidelineAmount").value
//     );
//     fData.append(
//       "registryPercent",
//       document.getElementById("registryPercent").value
//     );
//     fData.append(
//       "bankAmountPayable",
//       document.getElementById("bankAmountPayable").value
//     );
//     fData.append(
//       "cashAmountPayable",
//       document.getElementById("cashAmountPayable").value
//     );
//     fData.append("bookingDate", document.getElementById("bookingDate").value);
//     fData.append(
//       "constructionAmount",
//       document.getElementById("constructionAmount").value
//     );
//     fData.append("remarks", document.getElementById("remarks").value);

//     try {
//       const response = await axios.post(url, fData);
//       console.log(response);
//       updatePlotStatus();
//       toast({
//         title: "Booking added successfully!",
//         status: "success",
//         duration: 3000,
//         isClosable: true,
//         position: "top-right",
//       });
//       // Clear the form data after successful submission
//       // setFormData({
//       //   projectName: "",
//       //   blockName: "",
//       //   plotNo: "",
//       //   plotType: "",
//       //   customerName: "",
//       //   customerAddress: "",
//       //   customerContact: "",
//       //   registryGender: "",
//       //   areaSqmt: "",
//       //   ratePerSqmt: "",
//       //   totalAmount: "",
//       //   discountApplicable: "No",
//       //   discountPercent: "",
//       //   netAmount: "",
//       //   registryAmount: "",
//       //   serviceAmount: "",
//       //   maintenanceAmount: "",
//       //   miscAmount: "",
//       //   grandTotal: "",
//       //   constructionApplicable: "No",
//       //   constructionContractor: "",
//       //   totalAmountPayable: "",
//       //   guidelineAmount: "",
//       //   registryPercent: "",
//       //   bankAmountPayable: "",
//       //   cashAmountPayable: "",
//       //   bookingDate: "",
//       //   constructionAmount: "",
//       //   remarks: "",
//       // });
//     } catch (error) {
//       console.log(error.toJSON());
//     }
//   };

//   const updatePlotStatus = async () => {
//     const url = "https://lkgexcel.com/backend/setQuery.php";
//     let query =
//       "UPDATE plot SET plotStatus = 'Booked' WHERE plotNo = '" +
//       plotName +
//       "';";

//     let fData = new FormData();
//     fData.append("query", query);

//     try {
//       const response = await axios.post(url, fData);
//     } catch (error) {
//       console.log(error.toJSON());
//     }
//   };

//   const [projectsData, setprojectsData] = useState([]);
//   const [blockData, setblockData] = useState([]);
//   const [plotData, setplotData] = useState([]);
//   const [contractorData, setcontractorData] = useState([]);
//   const [master, setMaster] = useState([]);

//   const loadBlocks = async (pname) => {
//     let query = "SELECT * FROM block where projectName = '" + pname + "' ;";
//     // alert(query);

//     const url = "https://lkgexcel.com/backend/getQuery.php";
//     let fData = new FormData();

//     fData.append("query", query);

//     try {
//       const response = await axios.post(url, fData);

//       if (response && response.data) {
//         if (response.data.phpresult) {
//           setblockData(response.data.phpresult);
//           console.log(response.data.phpresult);
//         }
//       }
//     } catch (error) {
//       console.log("Please Select Proper Input");
//     }
//   };

//   const loadContractor = async () => {
//     let query = "SELECT * FROM contractor;";
//     // alert(query);

//     const url = "https://lkgexcel.com/backend/getQuery.php";
//     let fData = new FormData();

//     fData.append("query", query);

//     try {
//       const response = await axios.post(url, fData);

//       if (response && response.data) {
//         if (response.data.phpresult) {
//           setcontractorData(response.data.phpresult);
//           console.log(response.data.phpresult);
//         }
//       }
//     } catch (error) {
//       console.log("Please Select Proper Input");
//     }
//   };

//   const loadPlots = async (bname) => {
//     let query =
//       "SELECT * FROM plot where blockName = '" +
//       bname +
//       "' AND projectName ='" +
//       projectName +
//       "' AND plotStatus ='Available' ;";
//     // alert(query);

//     const url = "https://lkgexcel.com/backend/getQuery.php";
//     let fData = new FormData();

//     fData.append("query", query);

//     try {
//       const response = await axios.post(url, fData);

//       if (response && response.data) {
//         if (response.data.phpresult) {
//           setplotData(response.data.phpresult);
//           console.log(response.data.phpresult);
//         }
//       }
//     } catch (error) {
//       console.log("Please Select Proper Input");
//     }
//   };

//   const loadProjects = async () => {
//     let query = "SELECT * FROM project;";
//     // alert(query);

//     const url = "https://lkgexcel.com/backend/getQuery.php";
//     let fData = new FormData();

//     fData.append("query", query);

//     try {
//       const response = await axios.post(url, fData);

//       if (response && response.data) {
//         if (response.data.phpresult) {
//           setprojectsData(response.data.phpresult);
//           console.log(response.data.phpresult);
//         }
//       }
//     } catch (error) {
//       console.log("Please Select Proper Input");
//     }
//   };

//   const onSelectPlot = async (pno) => {
//     let query =
//       "SELECT * FROM plot where blockName = '" +
//       blockName +
//       "' AND projectName ='" +
//       projectName +
//       "' AND plotStatus ='Available' AND plotNo='" +
//       pno +
//       "';";
//     alert(query);

//     const url = "https://lkgexcel.com/backend/getQuery.php";
//     let fData = new FormData();

//     fData.append("query", query);

//     try {
//       const response = await axios.post(url, fData);

//       if (response && response.data) {
//         if (response.data.phpresult) {
//           console.log(response.data.phpresult);

//           let query1 =
//             "SELECT * FROM master where projectName ='" + projectName + "';";
//           // alert(query);

//           const url = "https://lkgexcel.com/backend/getQuery.php";
//           let fData1 = new FormData();

//           fData1.append("query", query1);

//           const response1 = await axios.post(url, fData1);

//           if (response1 && response1.data) {
//             if (response1.data.phpresult) {
//               setMaster(response1.data.phpresult);

//               document.getElementById("registryGender").value = "Male";

//               //document.getElementById('plotType').style.backgroundColor = 'gray';
//               // document.getElementById('plotType').disabled = true;

//               document.getElementById("areaSqmt").value =
//                 response.data.phpresult[0]["areaSqft"];
//               document.getElementById("ratePerSqmt").value =
//                 response.data.phpresult[0]["ratePerSqft"];
//               document.getElementById("totalAmount").value =
//                 document.getElementById("areaSqmt").value *
//                 document.getElementById("ratePerSqmt").value;
//               document.getElementById("discountApplicable").value = "No";
//               document.getElementById("discountPercent").value = "0";
//               document.getElementById("netAmount").value =
//                 document.getElementById("totalAmount").value;
//               document.getElementById("guidelineAmount").value =
//                 response.data.phpresult[0]["areaSqmt"] *
//                 response1.data.phpresult[0]["guideline"];

//               if (document.getElementById("registryGender").value == "Male") {
//                 document.getElementById("registryPercent").value =
//                   response1.data.phpresult[0]["registryMalePercent"];
//               }
//               if (document.getElementById("registryGender").value == "Female") {
//                 document.getElementById("registryPercent").value =
//                   response1.data.phpresult[0]["registryFemalePercent"];
//               }

//               document.getElementById("registryAmount").value =
//                 (document.getElementById("guidelineAmount").value / 100) *
//                 document.getElementById("registryPercent").value;
//               if (response1.data.phpresult[0]["serviceType"] == "Lumpsum") {
//                 document.getElementById("serviceAmount").value =
//                   response1.data.phpresult[0]["serviceValue"];
//               }
//               if (response1.data.phpresult[0]["serviceType"] == "PerSqmt") {
//                 document.getElementById("serviceAmount").value =
//                   response1.data.phpresult[0]["serviceValue"] *
//                   response.data.phpresult[0]["areaSqft"];
//               }

//               if (response1.data.phpresult[0]["maintenanceType"] == "Lumpsum") {
//                 document.getElementById("maintenanceAmount").value =
//                   response1.data.phpresult[0]["maintenanceValue"];
//               }
//               if (response1.data.phpresult[0]["maintenanceType"] == "PerSqmt") {
//                 document.getElementById("maintenanceAmount").value =
//                   response1.data.phpresult[0]["maintenanceValue"] *
//                   response.data.phpresult[0]["areaSqft"];
//               }

//               if (response1.data.phpresult[0]["miscType"] == "Lumpsum") {
//                 document.getElementById("miscAmount").value =
//                   response1.data.phpresult[0]["miscValue"];
//               }
//               if (response1.data.phpresult[0]["miscType"] == "PerSqmt") {
//                 document.getElementById("miscAmount").value =
//                   response1.data.phpresult[0]["miscValue"] *
//                   response.data.phpresult[0]["areaSqft"];
//               }

//               document.getElementById("grandTotal").value =
//                 parseInt(document.getElementById("netAmount").value) +
//                 parseInt(document.getElementById("registryAmount").value) +
//                 parseInt(document.getElementById("serviceAmount").value) +
//                 parseInt(document.getElementById("maintenanceAmount").value) +
//                 parseInt(document.getElementById("miscAmount").value);

//               document.getElementById("constructionApplicable").value = "No";

//               if (
//                 document.getElementById("constructionApplicable").value == "No"
//               ) {
//                 document.getElementById(
//                   "constructionContractor"
//                 ).disabled = true;
//                 //document.getElementById('constructionContractor').style.backgroundColor = 'gray';
//                 document.getElementById("constructionAmount").disabled = true;
//                 //document.getElementById('constructionAmount').style.backgroundColor = 'gray';

//                 document.getElementById("totalAmountPayable").value =
//                   document.getElementById("grandTotal").value;
//               }
//               if (
//                 document.getElementById("constructionApplicable").value == "Yes"
//               ) {
//                 document.getElementById(
//                   "constructionContractor"
//                 ).disabled = false;
//                 //document.getElementById('constructionContractor').style.backgroundColor = 'white';
//                 document.getElementById("constructionAmount").disabled = false;
//                 //document.getElementById('constructionAmount').style.backgroundColor = 'white';

//                 document.getElementById("totalAmountPayable").value =
//                   parseInt(document.getElementById("grandTotal").value) +
//                   parseInt(
//                     document.getElementById("constructionAmount").value
//                   );
//               }

//               document.getElementById("bankAmountPayable").value =
//                 document.getElementById("guidelineAmount").value;
//               document.getElementById("cashAmountPayable").value =
//                 Number(document.getElementById("totalAmountPayable").value) -
//                 document.getElementById("guidelineAmount").value;
//               setplottype(response.data.phpresult[0]["plotType"]);
//             }
//           }
//         }
//       }
//     } catch (error) {
//       console.log("erorrrr");
//     }
//   };

//   const updateOnChange = () => {
//     document.getElementById("totalAmount").value =
//       document.getElementById("areaSqmt").value *
//       document.getElementById("ratePerSqmt").value;
//     document.getElementById("netAmount").value =
//       document.getElementById("totalAmount").value;

//     if (document.getElementById("discountApplicable").value == "Yes") {
//       document.getElementById("netAmount").value =
//         document.getElementById("totalAmount").value -
//         (document.getElementById("totalAmount").value / 100) *
//           document.getElementById("discountPercent").value;
//     } else if (document.getElementById("discountApplicable").value == "No") {
//       document.getElementById("discountPercent").value = 0;
//       document.getElementById("netAmount").value =
//         document.getElementById("totalAmount").value;
//     }

//     document.getElementById("guidelineAmount").value =
//       plotData[0]["areaSqmt"] * master[0]["guideline"];

//     if (document.getElementById("registryGender").value == "Male") {
//       document.getElementById("registryPercent").value =
//         master[0]["registryMalePercent"];
//     }
//     if (document.getElementById("registryGender").value == "Female") {
//       document.getElementById("registryPercent").value =
//         master[0]["registryFemalePercent"];
//     }

//     document.getElementById("registryAmount").value =
//       (document.getElementById("guidelineAmount").value / 100) *
//       document.getElementById("registryPercent").value;
//     if (master[0]["serviceType"] == "Lumpsum") {
//       document.getElementById("serviceAmount").value =
//         master[0]["serviceValue"];
//     }
//     if (master[0]["serviceType"] == "PerSqmt") {
//       document.getElementById("serviceAmount").value =
//         master[0]["serviceValue"] * plotData[0]["areaSqft"];
//     }

//     if (master[0]["maintenanceType"] == "Lumpsum") {
//       document.getElementById("maintenanceAmount").value =
//         master[0]["maintenanceValue"];
//     }
//     if (master[0]["maintenanceType"] == "PerSqmt") {
//       document.getElementById("maintenanceAmount").value =
//         master[0]["maintenanceValue"] * plotData[0]["areaSqft"];
//     }

//     if (master[0]["miscType"] == "Lumpsum") {
//       document.getElementById("miscAmount").value = master[0]["miscValue"];
//     }
//     if (master[0]["miscType"] == "PerSqmt") {
//       document.getElementById("miscAmount").value =
//         master[0]["miscValue"] * plotData[0]["areaSqft"];
//     }

//     document.getElementById("grandTotal").value =
//       parseInt(document.getElementById("netAmount").value) +
//       parseInt(document.getElementById("registryAmount").value) +
//       parseInt(document.getElementById("serviceAmount").value) +
//       parseInt(document.getElementById("maintenanceAmount").value) +
//       parseInt(document.getElementById("miscAmount").value);

//     if (document.getElementById("constructionApplicable").value == "Yes") {
//       document.getElementById("constructionContractor").disabled = false;
//       //document.getElementById('constructionContractor').style.backgroundColor = 'white';
//       document.getElementById("constructionAmount").disabled = false;
//       //document.getElementById('constructionAmount').style.backgroundColor = 'white';

//       document.getElementById("totalAmountPayable").value =
//         Number(document.getElementById("grandTotal").value) +
//         Number(document.getElementById("constructionAmount").value);
//     }
//     if (document.getElementById("constructionApplicable").value == "No") {
//       document.getElementById("constructionContractor").disabled = true;
//       //document.getElementById('constructionContractor').style.backgroundColor = 'gray';
//       document.getElementById("constructionAmount").disabled = true;
//       //document.getElementById('constructionAmount').style.backgroundColor = 'gray';

//       document.getElementById("totalAmountPayable").value =
//         document.getElementById("grandTotal").value;
//     }

//     document.getElementById("bankAmountPayable").value =
//       document.getElementById("guidelineAmount").value;
//     document.getElementById("cashAmountPayable").value =
//       document.getElementById("totalAmountPayable").value -
//       document.getElementById("guidelineAmount").value;
//   };

//   useEffect(() => {
//     // Call the loadContractor function when the component mounts
//     loadProjects();
//     loadContractor();
//   }, []);

//   return (
//     <Box p={4} width="100%" position={"relative"} bottom={"0rem"}>
//       <Center pb={2}>
//         <Heading fontSize={"22px"} position={"relative"} bottom={"1rem"}>
//           New Booking
//         </Heading>
//       </Center>
//       <Box position={"relative"} bottom={"1rem"}>
//         <form onSubmit={onAddBook}>
//           <Grid templateColumns="repeat(4, 1fr)" gap={1}>
//             <FormControl colSpan={1} isRequired>
//               <FormLabel>Project Name</FormLabel>
//               <Select
//                 id="projectName"
//                 name="state"
//                 value={projectName}
//                 onChange={(e) => {
//                   setProjectName(e.target.value);
//                   loadBlocks(e.target.value);
//                 }}
//                 placeholder="Select Project"
//               >
//                 {projectsData.map((project) => {
//                   return (
//                     <option
//                       key={project.projectName}
//                       value={project.projectName}
//                     >
//                       {project.projectName}
//                     </option>
//                   );
//                 })}
//               </Select>
//             </FormControl>

//             <FormControl>
//               <FormLabel>Block Name</FormLabel>
//               <Select
//                 id="blockName"
//                 name="state"
//                 value={blockName}
//                 onChange={(e) => {
//                   setBlockname(e.target.value);
//                   loadPlots(e.target.value);
//                 }}
//                 placeholder="Select Block"
//               >
//                 {blockData.map((block) => {
//                   return (
//                     <option key={block.blockName} value={block.blockName}>
//                       {block.blockName}
//                     </option>
//                   );
//                 })}
//               </Select>
//             </FormControl>

//             <FormControl>
//               <FormLabel>Plot No</FormLabel>
//               <Select
//                 id="plotNo"
//                 name="state"
//                 value={plotName}
//                 onChange={(e) => {
//                   setPlotName(e.target.value);
//                   onSelectPlot(e.target.value);
//                 }}
//                 placeholder="Select Plot No"
//               >
//                 {plotData.map((plot) => {
//                   return (
//                     <option key={plot.plotNo} value={plot.plotNo}>
//                       {plot.plotNo}
//                     </option>
//                   );
//                 })}
//               </Select>
//             </FormControl>

//             <FormControl>
//               <FormLabel>Plot Type</FormLabel>
//               <Select
//                 id="plotType"
//                 name="plotType"
//                 value={plottype}
//                 onChange={(e) => {
//                   setplottype(e.target.value);
//                 }}
//                 //onChange={handleChange}
//                 required
//               >
//                 <option value="" disabled>
//                   Select Plot Type
//                 </option>

//                 <option key="Normal" value="Normal">
//                   Normal
//                 </option>
//                 <option key="EWS" value="EWS">
//                   EWS
//                 </option>
//                 <option key="1BHK" value="1BHK">
//                   1BHK
//                 </option>
//                 <option key="2BHK" value="2BHK">
//                   2BHK
//                 </option>
//                 <option key="3BHK" value="3BHK">
//                   3BHK
//                 </option>
//                 <option key="4BHK" value="4BHK">
//                   4BHK
//                 </option>
//                 <option key="5BHK" value="5BHK">
//                   5BHK
//                 </option>
//               </Select>
//             </FormControl>

//             <FormControl>
//               <FormLabel>Customer Name</FormLabel>
//               <Input
//                 id="customerName"
//                 type="text"
//                 name="customerName"
//                 //onChange={handleChange}
//                 required
//               />
//             </FormControl>

//             <FormControl>
//               <FormLabel>Customer Address</FormLabel>
//               <Input
//                 id="customerAddress"
//                 type="text"
//                 name="customerAddress"
//                 //onChange={handleChange}
//                 required
//               />
//             </FormControl>

//             <FormControl>
//               <FormLabel>Customer Contact</FormLabel>
//               <Input
//                 id="customerContact"
//                 type="text"
//                 name="customerContact"
//                 //onChange={handleChange}
//                 required
//               />
//             </FormControl>

//             <FormControl>
//               <FormLabel>Registry Gender</FormLabel>
//               <Select
//                 id="registryGender"
//                 name="registryGender"
//                 onChange={(e) => {
//                   setregisterygender(e.target.value);
//                   updateOnChange();
//                 }}
//                 //onChange={handleChange}
//                 required
//               >
//                 <option value="" disabled>
//                   Select Gender
//                 </option>
//                 {genders.map((gender) => (
//                   <option key={gender} value={gender}>
//                     {gender}
//                   </option>
//                 ))}
//               </Select>
//             </FormControl>

//             <FormControl>
//               <FormLabel>Area Sqft</FormLabel>
//               <Input
//                 onChange={updateOnChange}
//                 id="areaSqmt"
//                 type="text"
//                 name="areaSqmt"
//                 //onChange={handleChange}
//                 required
//               />
//             </FormControl>

//             <FormControl>
//               <FormLabel>Rate Per Sqft</FormLabel>
//               <Input
//                 onChange={updateOnChange}
//                 id="ratePerSqmt"
//                 type="text"
//                 name="ratePerSqmt"
//                 //onChange={handleChange}
//                 required
//               />
//             </FormControl>

//             <FormControl>
//               <FormLabel>Total Amount</FormLabel>
//               <Input
//                 onChange={updateOnChange}
//                 id="totalAmount"
//                 type="text"
//                 name="totalAmount"
//                 //onChange={handleChange}
//                 required
//                 bg={"yellow"}
//                 color={"black"}
//               />
//             </FormControl>
//             <Box gridColumn="span 1" />
//             <FormControl>
//               <FormLabel>Discount Applicable</FormLabel>
//               <Select
//                 id="discountApplicable"
//                 name="discountApplicable"
//                 onChange={(e) => {
//                   setdiscountApplicable(e.target.value);
//                   updateOnChange();
//                 }}
//                 //onChange={handleChange}
//                 required
//               >
//                 <option value="Yes">Yes</option>
//                 <option value="No">No</option>
//               </Select>
//             </FormControl>
//             <FormControl>
//               <FormLabel>Discount Percent</FormLabel>
//               <Input
//                 onChange={updateOnChange}
//                 id="discountPercent"
//                 type="text"
//                 name="discountPercent"
//                 //onChange={handleChange}
//                 required
//               />
//             </FormControl>
//             <FormControl>
//               <FormLabel>Net Amount</FormLabel>
//               <Input
//                 onChange={updateOnChange}
//                 id="netAmount"
//                 type="text"
//                 name="netAmount"
//                 //onChange={handleChange}
//                 required
//                 bg={"yellow"}
//               />
//             </FormControl>
//             <Box gridColumn="span 1" />
//             <FormControl>
//               <FormLabel>Registry Amount</FormLabel>
//               <Input
//                 onChange={updateOnChange}
//                 id="registryAmount"
//                 type="text"
//                 name="registryAmount"
//                 //onChange={handleChange}
//                 required
//               />
//             </FormControl>

//             <FormControl>
//               <FormLabel>Service Amount</FormLabel>
//               <Input
//                 onChange={updateOnChange}
//                 id="serviceAmount"
//                 type="text"
//                 name="serviceAmount"
//                 //onChange={handleChange}
//                 required
//               />
//             </FormControl>

//             <FormControl>
//               <FormLabel>Maintenance Amount</FormLabel>
//               <Input
//                 onChange={updateOnChange}
//                 id="maintenanceAmount"
//                 type="text"
//                 name="maintenanceAmount"

//                 //onChange={handleChange}
//               />
//             </FormControl>
//             <FormControl>
//               <FormLabel>Misc Amount</FormLabel>
//               <Input
//                 onChange={updateOnChange}
//                 id="miscAmount"
//                 type="text"
//                 name="miscAmount"

//                 //onChange={handleChange}
//               />
//             </FormControl>
//             <FormControl>
//               <FormLabel>Grand Total</FormLabel>
//               <Input
//                 onChange={updateOnChange}
//                 id="grandTotal"
//                 type="text"
//                 name="grandTotal"
//                 //onChange={handleChange}
//                 bg={"yellow"}
//               />
//             </FormControl>
//             <FormControl>
//               <FormLabel>Construction Applicable</FormLabel>
//               <Select
//                 id="constructionApplicable"
//                 value={constructionapplicable}
//                 onChange={(e) => {
//                   setconstructionapplicable(e.target.value);
//                   updateOnChange();
//                 }}
//                 name="constructionApplicable"
//                 //onChange={handleChange}
//                 required
//               >
//                 <option value="Yes">Yes</option>
//                 <option value="No">No</option>
//               </Select>
//             </FormControl>
//             <FormControl>
//               <FormLabel>Construction Contractor</FormLabel>

//               <Select
//                 id="constructionContractor"
//                 type="text"
//                 name="constructionContractor"
//                 value={contractorName}
//                 onChange={(e) => {
//                   setcontractorName();
//                 }}
//                 placeholder="Select Contactor"
//               >
//                 {contractorData.map((block) => {
//                   return (
//                     <option
//                       key={block.contractorName}
//                       value={block.contractorName}
//                     >
//                       {block.contractorName}
//                     </option>
//                   );
//                 })}
//               </Select>
//             </FormControl>
//             <FormControl>
//               <FormLabel>Construction Amount</FormLabel>
//               <Input
//                 onChange={updateOnChange}
//                 id="constructionAmount"
//                 type="text"
//                 name="constructionAmount"

//                 //onChange={handleChange}
//               />
//             </FormControl>

//             <FormControl>
//               <FormLabel>Total Amount Payable</FormLabel>
//               <Input
//                 onChange={updateOnChange}
//                 id="totalAmountPayable"
//                 type="text"
//                 name="totalAmountPayable"
//                 //onChange={handleChange}
//                 bg={"yellow"}
//               />
//             </FormControl>
//             <FormControl>
//               <FormLabel>Guideline Amount</FormLabel>
//               <Input
//                 onChange={updateOnChange}
//                 id="guidelineAmount"
//                 type="text"
//                 name="guidelineAmount"

//                 //onChange={handleChange}
//               />
//             </FormControl>

//             <FormControl>
//               <FormLabel>Registry Percent</FormLabel>
//               <Input
//                 onChange={updateOnChange}
//                 id="registryPercent"
//                 type="text"
//                 name="registryPercent"

//                 //onChange={handleChange}
//               />
//             </FormControl>
//             <Box gridColumn="span 1" />
//             <Box
//               display="grid"
//               gridAutoFlow="column"
//               position={"absolute"}
//               top={"100%"}
//               gap={"2rem"}
//             >
//               <FormControl>
//                 <FormLabel>Bank Amount Payable</FormLabel>
//                 <Input
//                   onChange={updateOnChange}
//                   id="bankAmountPayable"
//                   type="text"
//                   name="bankAmountPayable"
//                   //onChange={handleChange}
//                   bg={"yellow"}
//                 />
//               </FormControl>

//               <FormControl>
//                 <FormLabel>Cash Amount Payable</FormLabel>
//                 <Input
//                   onChange={updateOnChange}
//                   id="cashAmountPayable"
//                   type="text"
//                   name="cashAmountPayable"
//                   //onChange={handleChange}
//                   bg={"yellow"}
//                 />
//               </FormControl>

//               <FormControl>
//                 <FormLabel>Booking Date</FormLabel>
//                 <Input
//                   onChange={updateOnChange}
//                   id="bookingDate"
//                   type="date"
//                   name="bookingDate"
//                   //onChange={handleChange}
//                   required
//                 />
//               </FormControl>
//               <FormControl>
//                 <FormLabel>Remarks</FormLabel>
//                 <Input
//                   onChange={updateOnChange}
//                   id="remarks"
//                   type="text"
//                   name="remarks"
//                   //onChange={handleChange}
//                   required
//                 />
//               </FormControl>

//               <Button colorScheme="blue" type="submit" mt={8}>
//                 Submit
//               </Button>
//             </Box>
//           </Grid>
//         </form>
//       </Box>
//     </Box>
//   );
// };

// export default NewBooking;


// // import React, { useState, useEffect } from "react";
// // import axios from "axios";

// // import {
// //   Grid,
// //   GridItem,
// //   Input,
// //   FormControl,
// //   FormLabel,
// //   Box,
// //   Flex,
// //   Center,
// //   VStack,
// //   Textarea,
// //   HStack,
// //   Divider,
// //   Text,
// //   Button,
// //   Table,
// //   Thead,
// //   Tr,
// //   Th,
// //   Tbody,
// //   Td,
// //   Select,
// //   TableContainer,
// // } from "@chakra-ui/react";

// // const PaymentTransaction = () => {
// //   const [displa, setdisplay] = useState(false);

// //   const [projectName, setProjectName] = useState("");
// //   const [blockName, setBlockname] = useState("");
// //   const [plotName, setPlotName] = useState("");
// //   const [projectsData, setprojectsData] = useState([]);
// //   const [bookingData, setbooking] = useState([]);

// //   const [blockData, setblockData] = useState([]);
// //   const [plotData, setplotData] = useState([]);

// //   const loadProjects = async () => {
// //     let query = "SELECT * FROM project;";
// //     // alert(query);

// //     const url = "https://lkgexcel.com/backend/getQuery.php";
// //     let fData = new FormData();

// //     fData.append("query", query);

// //     try {
// //       const response = await axios.post(url, fData);

// //       if (response && response.data) {
// //         if (response.data.phpresult) {
// //           setprojectsData(response.data.phpresult);
// //           console.log(response.data.phpresult);
// //         }
// //       }
// //     } catch (error) {
// //       console.log("Please Select Proper Input");
// //     }
// //   };

// //   const loadBlocks = async (pname) => {
// //     let query = "SELECT * FROM block where projectName = '" + pname + "' ;";
// //     // alert(query);

// //     const url = "https://lkgexcel.com/backend/getQuery.php";
// //     let fData = new FormData();

// //     fData.append("query", query);

// //     try {
// //       const response = await axios.post(url, fData);

// //       if (response && response.data) {
// //         if (response.data.phpresult) {
// //           setblockData(response.data.phpresult);
// //           console.log(response.data.phpresult);
// //         }
// //       }
// //     } catch (error) {
// //       console.log("Please Select Proper Input");
// //     }
// //   };

// //   const loadPlots = async (bname) => {
// //     let query =
// //       "SELECT * FROM plot where blockName = '" +
// //       bname +
// //       "' AND projectName ='" +
// //       projectName +
// //       "' AND plotStatus ='Booked' ;";
// //     // alert(query);

// //     const url = "https://lkgexcel.com/backend/getQuery.php";
// //     let fData = new FormData();

// //     fData.append("query", query);

// //     try {
// //       const response = await axios.post(url, fData);

// //       if (response && response.data) {
// //         if (response.data.phpresult) {
// //           setplotData(response.data.phpresult);
// //           console.log(response.data.phpresult);
// //         }
// //       }
// //     } catch (error) {
// //       console.log("Please Select Proper Input");
// //     }
// //   };

// //   useEffect(() => {
// //     // Call the loadContractor function when the component mounts
// //     loadProjects();
// //   }, []);
// //   const loadBooking = async (bname) => {
// //     let query =
// //       "SELECT * FROM booking where blockName = '" +
// //       bname +
// //       "' AND projectName ='" +
// //       projectName +
// //       "' ;";
// //     // "' AND plotStatus ='Booked' ;";
// //     // alert(query);

// //     const url = "https://lkgexcel.com/backend/getQuery.php";
// //     let fData = new FormData();

// //     fData.append("query", query);

// //     try {
// //       const response = await axios.post(url, fData);

// //       if (response && response.data) {
// //         if (response.data.phpresult) {
// //           setbooking(response.data.phpresult);
// //           console.log(response.data.phpresult);
// //         }
// //       }
// //     } catch (error) {
// //       console.log("Please Select Proper Input");
// //     }
// //   };

// //   useEffect(() => {
// //     loadBooking();
// //     loadBlocks();
// //     loadPlots();
// //   }, []);

// //   return (
// //     <Box display={"flex"} height={"100vh"} maxW={"100vw"}>
// //       <Box flex={"20%"} borderRight={"1px solid grey"}>
// //         <VStack alignItems={"flex-start"} gap={0}>
// //           <FormControl>
// //             <Flex
// //               align="center"
// //               justifyContent={"space-between"}
// //               padding={"0px 4px 0px 4px"}
// //             >
// //               <FormLabel htmlFor="projectName">Project Name</FormLabel>
// //               <Select
// //                 id="projectName"
// //                 placeholder="Select Project"
// //                 onChange={(e) => {
// //                   setProjectName(e.target.value);
// //                   loadBlocks(e.target.value);
// //                 }}
// //                 w={"60%"}
// //               >
// //                 {projectsData.map((project) => {
// //                   return (
// //                     <option
// //                       key={project.projectName}
// //                       value={project.projectName}
// //                     >
// //                       {project.projectName}
// //                     </option>
// //                   );
// //                 })}
// //                 {/* Add more projects as needed */}
// //               </Select>
// //             </Flex>
// //           </FormControl>

// //           <FormControl>
// //             <Flex
// //               align="center"
// //               justifyContent={"space-between"}
// //               padding={"0px 4px 0px 4px"}
// //             >
// //               <FormLabel htmlFor="blockName">Block Name</FormLabel>
// //               <Select
// //                 id="blockName"
// //                 placeholder="Select Block"
// //                 onChange={(e) => {
// //                   setBlockname(e.target.value);
// //                   loadPlots(e.target.value);
// //                   loadBooking(e.target.value);
// //                 }}
// //                 w={"60%"}
// //               >
// //                 {blockData.map((block) => {
// //                   return (
// //                     <option key={block.blockName} value={block.blockName}>
// //                       {block.blockName}
// //                     </option>
// //                   );
// //                 })}
// //               </Select>
// //             </Flex>
// //           </FormControl>

// //           <FormControl>
// //             <Flex
// //               align="center"
// //               justifyContent={"space-between"}
// //               padding={"0px 4px 0px 4px"}
// //             >
// //               <FormLabel htmlFor="plotNo">Plot No</FormLabel>
// //               <Select
// //                 id="plotNo"
// //                 placeholder="Select Plot No"
// //                 onChange={(e) => {
// //                   setPlotName(e.target.value);
// //                 }}
// //                 w={"60%"}
// //               >
// //                 {plotData.map((plot) => {
// //                   return (
// //                     <option key={plot.plotNo} value={plot.plotNo}>
// //                       {plot.plotNo}
// //                     </option>
// //                   );
// //                 })}
// //               </Select>
// //             </Flex>
// //           </FormControl>

// //           <FormControl>
// //             <Flex
// //               align="center"
// //               justifyContent={"space-between"}
// //               padding={"0px 4px 0px 4px"}
// //             >
// //               <FormLabel htmlFor="plotType">Plot Type</FormLabel>
// //               <Input
// //                 id="plotType"
// //                 type="text"
// //                 placeholder="Enter Plot Type"
// //                 w={"60%"}
// //                 value={bookingData[0] ? bookingData[0].plotType : ""}
// //               />
// //             </Flex>
// //           </FormControl>

// //           <FormControl>
// //             <Flex
// //               align="center"
// //               justifyContent={"space-between"}
// //               padding={"0px 4px 0px 4px"}
// //             >
// //               <FormLabel htmlFor="custName">Cust Name</FormLabel>
// //               <Input
// //                 id="custName"
// //                 type="text"
// //                 placeholder="Enter Cust name"
// //                 w={"60%"}
// //                 value={bookingData[0] ? bookingData[0].customerName : ""}
// //               />
// //             </Flex>
// //           </FormControl>

// //           <FormControl>
// //             <Flex
// //               align="center"
// //               justifyContent={"space-between"}
// //               padding={"0px 4px 0px 4px"}
// //             >
// //               <FormLabel htmlFor="custAddress">Cust Address</FormLabel>
// //               <Textarea
// //                 id="custAddress"
// //                 resize={"horizontal"}
// //                 placeholder="Enter Address"
// //                 w={"60%"}
// //                 minH={"2.5rem"}
// //                 value={bookingData[0] ? bookingData[0].customerAddress : ""}
// //               />
// //             </Flex>
// //           </FormControl>

// //           <FormControl>
// //             <Flex
// //               align="center"
// //               justifyContent={"space-between"}
// //               padding={"0px 4px 0px 4px"}
// //             >
// //               <FormLabel htmlFor="areaSqft">Ares Sqft</FormLabel>
// //               <Input
// //                 id="areaSqft"
// //                 type="number"
// //                 placeholder="Enter Area Sqft"
// //                 w={"60%"}
// //                 value={bookingData[0] ? bookingData[0].areaSqft : ""}
// //               />
// //             </Flex>
// //           </FormControl>

// //           <FormControl>
// //             <Flex
// //               align="center"
// //               justifyContent={"space-between"}
// //               padding={"0px 4px 0px 4px"}
// //             >
// //               <FormLabel htmlFor="ratePerSqft">Rate Per Sqft</FormLabel>
// //               <Input
// //                 id="ratePerSqft"
// //                 type="number"
// //                 placeholder="Enter Rate Sqft"
// //                 w={"60%"}
// //                 value={bookingData[0] ? bookingData[0].rateAreaSqft : ""}
// //               />
// //             </Flex>
// //           </FormControl>

// //           <FormControl>
// //             <Flex
// //               align="center"
// //               justifyContent={"space-between"}
// //               padding={"0px 4px 0px 4px"}
// //             >
// //               <FormLabel htmlFor="totalAmount">Total Amount</FormLabel>
// //               <Input
// //                 id="totalAmount"
// //                 type="number"
// //                 placeholder="Enter Amount"
// //                 w={"60%"}
// //                 background={
// //                   bookingData[0]
// //                     ? !bookingData[0].totalAmount == ""
// //                       ? "yellow"
// //                       : ""
// //                     : ""
// //                 }
// //                 value={bookingData[0] ? bookingData[0].totalAmount : ""}
// //               />
// //             </Flex>
// //           </FormControl>

// //           <FormControl>
// //             <Flex
// //               align="center"
// //               justifyContent={"space-between"}
// //               padding={"0px 4px 0px 4px"}
// //             >
// //               <FormLabel htmlFor="discount">Discount</FormLabel>
// //               <Select
// //                 id="discount"
// //                 placeholder="Select Discount"
// //                 w={"60%"}
// //                 onChange={(e) => {
// //                   loadBooking(e.target.value);
// //                 }}
// //                 value={bookingData[0] ? bookingData[0].discountApplicable : ""}
// //               >
// //                 {bookingData.map((i) => (
// //                   <option value={i.discountApplicable}>
// //                     {i.discountApplicable}
// //                   </option>
// //                 ))}
// //               </Select>
// //             </Flex>
// //           </FormControl>

// //           <FormControl>
// //             <Flex
// //               align="center"
// //               justifyContent={"space-between"}
// //               padding={"0px 4px 0px 4px"}
// //             >
// //               <FormLabel htmlFor="discountPercent">Discount %</FormLabel>
// //               <Input
// //                 id="discountPercent"
// //                 type="number"
// //                 placeholder="Enter Discount%"
// //                 w={"60%"}
// //                 value={bookingData[0] ? bookingData[0].discountPercent : ""}
// //               />
// //             </Flex>
// //           </FormControl>

// //           <FormControl>
// //             <Flex
// //               align="center"
// //               justifyContent={"space-between"}
// //               padding={"0px 4px 0px 4px"}
// //             >
// //               <FormLabel htmlFor="netAmount">Net Amount</FormLabel>
// //               <Input
// //                 id="netAmount"
// //                 type="number"
// //                 placeholder="Enter Amount"
// //                 w={"60%"}
// //                 background={
// //                   bookingData[0]
// //                     ? !bookingData[0].netAmount == ""
// //                       ? "yellow"
// //                       : ""
// //                     : ""
// //                 }
// //                 value={bookingData[0] ? bookingData[0].netAmount : ""}
// //               />
// //             </Flex>
// //           </FormControl>

// //           <FormControl>
// //             <Flex
// //               align="center"
// //               justifyContent={"space-between"}
// //               padding={"0px 4px 0px 4px"}
// //             >
// //               <FormLabel htmlFor="registryAmount">Registry Amount</FormLabel>
// //               <Input
// //                 id="registryAmount"
// //                 type="number"
// //                 placeholder="Enter Registry"
// //                 w={"60%"}
// //                 value={bookingData[0] ? bookingData[0].registeryAmount : ""}
// //               />
// //             </Flex>
// //           </FormControl>

// //           <FormControl>
// //             <Flex
// //               align="center"
// //               justifyContent={"space-between"}
// //               padding={"0px 4px 0px 4px"}
// //             >
// //               <FormLabel htmlFor="serviceAmount">Service Amount</FormLabel>
// //               <Input
// //                 id="serviceAmount"
// //                 type="number"
// //                 placeholder="Enter Amount"
// //                 w={"60%"}
// //                 value={bookingData[0] ? bookingData[0].serviceAmount : ""}
// //               />
// //             </Flex>
// //           </FormControl>

// //           <FormControl>
// //             <Flex
// //               align="center"
// //               justifyContent={"space-between"}
// //               padding={"0px 4px 0px 4px"}
// //             >
// //               <FormLabel htmlFor="maintenanceAmount">Maintenace Amt</FormLabel>
// //               <Input
// //                 id="maintenanceAmount"
// //                 type="number"
// //                 placeholder="Enter Amount"
// //                 w={"60%"}
// //                 value={bookingData[0] ? bookingData[0].maintenanceAmount : ""}
// //               />
// //             </Flex>
// //           </FormControl>

// //           <FormControl>
// //             <Flex
// //               align="center"
// //               justifyContent={"space-between"}
// //               padding={"0px 4px 0px 4px"}
// //             >
// //               <FormLabel htmlFor="miscAmount">Misc Amount</FormLabel>
// //               <Input
// //                 id="miscAmount"
// //                 type="number"
// //                 placeholder="Enter Amount"
// //                 w={"60%"}
// //                 value={bookingData[0] ? bookingData[0].miscAmount : ""}
// //               />
// //             </Flex>
// //           </FormControl>

// //           <FormControl>
// //             <Flex
// //               align="center"
// //               justifyContent={"space-between"}
// //               padding={"0px 4px 0px 4px"}
// //             >
// //               <FormLabel htmlFor="grandTotal">Grand Total</FormLabel>
// //               <Input
// //                 id="grandTotal"
// //                 type="number"
// //                 placeholder="Enter Amount"
// //                 w={"60%"}
// //                 background={
// //                   bookingData[0]
// //                     ? !bookingData[0].grandTotal == ""
// //                       ? "yellow"
// //                       : ""
// //                     : ""
// //                 }
// //                 value={bookingData[0] ? bookingData[0].grandTotal : ""}
// //               />
// //             </Flex>
// //           </FormControl>

// //           <FormControl>
// //             <Flex
// //               align="center"
// //               justifyContent={"space-between"}
// //               padding={"0px 4px 0px 4px"}
// //             >
// //               <FormLabel htmlFor="construction">Construction Yes/No</FormLabel>
// //               <Select
// //                 id="construction"
// //                 placeholder="Select"
// //                 w={"60%"}
// //                 value={
// //                   bookingData[0] ? bookingData[0].constructionApplicable : ""
// //                 }
// //               >
// //                 {bookingData.map((i) => (
// //                   <option value={i.constructionApplicable}>
// //                     {i.constructionApplicable}
// //                   </option>
// //                 ))}
// //               </Select>
// //             </Flex>
// //           </FormControl>

// //           <FormControl>
// //             <Flex
// //               align="center"
// //               justifyContent={"space-between"}
// //               padding={"0px 4px 0px 4px"}
// //             >
// //               <FormLabel htmlFor="contractor">Contractor</FormLabel>
// //               <Select
// //                 id="contractor"
// //                 placeholder="Select"
// //                 w={"60%"}
// //                 value={
// //                   bookingData[0] ? bookingData[0].constructionContractor : ""
// //                 }
// //               >
// //                 {bookingData.map((i) => (
// //                   <option value={i.constructionContractor}>
// //                     {i.constructionContractor}
// //                   </option>
// //                 ))}
// //               </Select>
// //             </Flex>
// //           </FormControl>

// //           <FormControl>
// //             <Flex
// //               align="center"
// //               justifyContent={"space-between"}
// //               padding={"0px 4px 0px 4px"}
// //             >
// //               <FormLabel htmlFor="constructionAmount">
// //                 Construction Amount
// //               </FormLabel>
// //               <Input
// //                 id="constructionAmount"
// //                 type="number"
// //                 placeholder="Enter Amount"
// //                 w={"60%"}
// //                 value={bookingData[0] ? bookingData[0].constructionAmount : ""}
// //               />
// //             </Flex>
// //           </FormControl>

// //           <FormControl>
// //             <Flex
// //               align="center"
// //               justifyContent={"space-between"}
// //               padding={"0px 4px 0px 4px"}
// //             >
// //               <FormLabel htmlFor="totalAmountPayable">
// //                 Total Amount Payable
// //               </FormLabel>
// //               <Input
// //                 id="totalAmountPayable"
// //                 type="number"
// //                 placeholder="Enter Amount"
// //                 w={"60%"}
// //                 background={
// //                   bookingData[0]
// //                     ? !bookingData[0].totalAmountPayable == ""
// //                       ? "yellow"
// //                       : ""
// //                     : ""
// //                 }
// //                 value={bookingData[0] ? bookingData[0].totalAmountPayable : ""}
// //               />
// //             </Flex>
// //           </FormControl>

// //           <FormControl>
// //             <Flex
// //               align="center"
// //               justifyContent={"space-between"}
// //               padding={"0px 4px 0px 4px"}
// //             >
// //               <FormLabel htmlFor="guidelineAmount">Guideline Amount</FormLabel>
// //               <Input
// //                 id="guidelineAmount"
// //                 type="number"
// //                 placeholder="Enter Amount"
// //                 w={"60%"}
// //                 value={bookingData[0] ? bookingData[0].guidelineAmount : ""}
// //               />
// //             </Flex>
// //           </FormControl>

// //           <FormControl>
// //             <Flex
// //               align="center"
// //               justifyContent={"space-between"}
// //               padding={"0px 4px 0px 4px"}
// //             >
// //               <FormLabel htmlFor="registryPercent">Registry Percent</FormLabel>
// //               <Input
// //                 id="registryPercent"
// //                 type="number"
// //                 placeholder="Enter Amount"
// //                 w={"60%"}
// //                 value={bookingData[0] ? bookingData[0].registeryPercent : ""}
// //               />
// //             </Flex>
// //           </FormControl>

// //           <FormControl>
// //             <Flex
// //               align="center"
// //               justifyContent={"space-between"}
// //               padding={"0px 4px 0px 4px"}
// //             >
// //               <FormLabel htmlFor="bankAmountPayable">
// //                 Bank Amount Payable
// //               </FormLabel>
// //               <Input
// //                 id="bankAmountPayable"
// //                 type="number"
// //                 placeholder="Enter Amount"
// //                 w={"60%"}
// //                 background={
// //                   bookingData[0]
// //                     ? !bookingData[0].bankAmountPayable == ""
// //                       ? "yellow"
// //                       : ""
// //                     : ""
// //                 }
// //                 value={bookingData[0] ? bookingData[0].bankAmountPayable : ""}
// //               />
// //             </Flex>
// //           </FormControl>

// //           <FormControl>
// //             <Flex
// //               align="center"
// //               justifyContent={"space-between"}
// //               padding={"0px 4px 0px 4px"}
// //             >
// //               <FormLabel htmlFor="cashAmountPayable">
// //                 Cash Amount Payable
// //               </FormLabel>
// //               <Input
// //                 id="cashAmountPayable"
// //                 type="number"
// //                 placeholder="Enter Amount"
// //                 w={"60%"}
// //                 background={
// //                   bookingData[0]
// //                     ? !bookingData[0].cashAmountPayable == ""
// //                       ? "yellow"
// //                       : ""
// //                     : ""
// //                 }
// //                 value={bookingData[0] ? bookingData[0].cashAmountPayable : ""}
// //               />
// //             </Flex>
// //           </FormControl>

// //           <Flex padding={"0px 4px 0px 4px"} alignSelf={"end"}>
// //             <Button colorScheme="blue"> Edit</Button>
// //           </Flex>
// //           {/* <Center>
// //             <hr style={{ width: "80%", marginTop: "10px" }} />
// //           </Center> */}
// //         </VStack>
// //       </Box>

// //       <Box flex={"80%"} maxW={"80%"}>
// //         <Box borderBottom={"1px solid black"} w={"100%"} p={2} pb={4}>
// //           <HStack justifyContent={"space-between"}>
// //             <Box maxW={"80%"}>
// //               <HStack marginLeft={2}>
// //                 <FormControl>
// //                   <Flex
// //                     align="center"
// //                     // justifyContent={"space-between"}
// //                     // padding={"0px 4px 0px 4px"}
// //                   >
// //                     <FormLabel fontSize={"sm"}>Plot Status</FormLabel>
// //                     <Input
// //                       type="text"
// //                       w={"60%"}
// //                       value={plotData[0] ? plotData[0].plotStatus : ""}
// //                     />
// //                   </Flex>
// //                 </FormControl>
// //                 <FormControl>
// //                   <Flex
// //                     align="center"
// //                     // justifyContent={"space-between"}
// //                     // padding={"0px 4px 0px 4px"}
// //                   >
// //                     <FormLabel fontSize={"sm"}>Registry Gender</FormLabel>

// //                     <Select id="registrygender" placeholder="Select">
// //                       <option value="male">Male</option>
// //                       <option value="female">Female</option>
// //                     </Select>
// //                   </Flex>
// //                 </FormControl>
// //                 <FormControl>
// //                   <Flex
// //                     align="center"
// //                     // justifyContent={"space-between"}
// //                     // padding={"0px 4px 0px 4px"}
// //                   >
// //                     <FormLabel fontSize={"sm"}>Registry Date</FormLabel>
// //                     <Input type="date" w={"60%"} />
// //                   </Flex>
// //                 </FormControl>
// //               </HStack>
// //               <Divider mt={4} />
// //               <HStack
// //                 alignContent={"flex-start"}
// //                 justifyContent={"space-between"}
// //                 mt={4}
// //                 mb={4}
// //               >
// //                 <VStack>
// //                   <Text>Total Amount Payable = 15000</Text>
// //                   <Text>Bank Amount Payable = 15000</Text>
// //                   <Text>Cash Amount Payable = 15000</Text>
// //                 </VStack>
// //                 <VStack>
// //                   <Text>Total Amount Received = </Text>
// //                   <Text>Bank Amount Received = </Text>
// //                   <Text>Cash Amount Received = </Text>
// //                 </VStack>
// //                 <VStack>
// //                   <Text>Total Amount Balance = </Text>

// //                   <Text>Bank Amount Balance = </Text>

// //                   <Text>Cash Amount Balance = </Text>
// //                 </VStack>
// //               </HStack>
// //             </Box>
// //             <VStack>
// //               <Button colorScheme="orange" size={"sm"}>
// //                 Registry
// //               </Button>
// //               <Button colorScheme="orange" size={"sm"}>
// //                 Cancel Plot
// //               </Button>
// //               <Button colorScheme="orange" size={"sm"}>
// //                 Transfer Plot
// //               </Button>
// //               <Button colorScheme="orange" size={"sm"}>
// //                 Delete Plot
// //               </Button>
// //               <Button colorScheme="orange" size={"sm"}>
// //                 History
// //               </Button>
// //             </VStack>
// //           </HStack>
// //           <Divider w={"100%"} bg={"#121212"} />
// //           <HStack
// //             alignContent={"flex-start"}
// //             justifyContent={"space-between"}
// //             mt={4}
// //           >
// //             <Text>Payment Transaction</Text>
// //             <Button
// //               colorScheme="teal"
// //               size="sm"
// //               onClick={() => {
// //                 setdisplay(!displa);
// //               }}
// //             >
// //               Add Payment
// //             </Button>
// //           </HStack>
// //           <Divider w={"100%"} bg={"#121212"} mt={4} />
// //           <Box display={displa == true ? "flex" : "none"}>
// //             <VStack alignItems={"flex-start"}>
// //               <HStack gap={"15px"} p={3}>
// //                 <FormControl>
// //                   <Flex
// //                     align="flex-start"
// //                     // justifyContent={"space-between"}
// //                     // padding={"0px 4px 0px 4px"}
// //                     flexDirection={"column"}
// //                   >
// //                     <FormLabel fontSize={"sm"} margin={0}>
// //                       Date
// //                     </FormLabel>
// //                     <Input
// //                       type="date"
// //                       // w={"60%"}
// //                     />
// //                   </Flex>
// //                 </FormControl>
// //                 <FormControl>
// //                   <Flex
// //                     align="flex-start"
// //                     // justifyContent={"space-between"}
// //                     // padding={"0px 4px 0px 4px"}
// //                     flexDirection={"column"}
// //                   >
// //                     <FormLabel fontSize={"sm"} margin={0}>
// //                       Payment Type
// //                     </FormLabel>
// //                     <Select placeholder="Select  ">
// //                       <option value="cash">Cash</option>
// //                       <option value="bank">Bank</option>
// //                       {/* Add more projects as needed */}
// //                     </Select>
// //                   </Flex>
// //                 </FormControl>
// //                 <FormControl>
// //                   <Flex
// //                     align="flex-start"
// //                     // justifyContent={"space-between"}
// //                     // padding={"0px 4px 0px 4px"}
// //                     flexDirection={"column"}
// //                   >
// //                     <FormLabel fontSize={"sm"} margin={0}>
// //                       Amount
// //                     </FormLabel>
// //                     <Input
// //                       type="number"
// //                       // w={"60%"}
// //                     />
// //                   </Flex>
// //                 </FormControl>
// //                 <FormControl>
// //                   <Flex
// //                     align="flex-start"
// //                     // justifyContent={"space-between"}
// //                     // padding={"0px 4px 0px 4px"}
// //                     flexDirection={"column"}
// //                   >
// //                     <FormLabel fontSize={"sm"} margin={0}>
// //                       Bank Mode
// //                     </FormLabel>
// //                     <Select placeholder="Select  ">
// //                       <option value="none">None</option>
// //                       <option value="cheque">Cheque/DD</option>
// //                       <option value="rtgs">RTGS/NEFT</option>
// //                       <option value="loan">Loan</option>
// //                       <option value="upi">UPI</option>

// //                       {/* Add more projects as needed */}
// //                     </Select>
// //                   </Flex>
// //                 </FormControl>
// //                 <FormControl>
// //                   <Flex
// //                     align="flex-start"
// //                     // justifyContent={"space-between"}
// //                     // padding={"0px 4px 0px 4px"}
// //                     flexDirection={"column"}
// //                   >
// //                     <FormLabel fontSize={"sm"} margin={0}>
// //                       Chq/Ref No
// //                     </FormLabel>
// //                     <Input
// //                       type="number"
// //                       // w={"60%"}
// //                     />
// //                   </Flex>
// //                 </FormControl>
// //                 <FormControl>
// //                   <Flex
// //                     align="flex-start"
// //                     // justifyContent={"space-between"}
// //                     // padding={"0px 4px 0px 4px"}
// //                     flexDirection={"column"}
// //                   >
// //                     <FormLabel fontSize={"sm"} margin={0}>
// //                       Bank Name
// //                     </FormLabel>
// //                     <Input
// //                       type="text"
// //                       // w={"60%"}
// //                     />
// //                   </Flex>
// //                 </FormControl>
// //               </HStack>
// //               <HStack gap={"15px"} p={3} pt={0}>
// //                 <FormControl>
// //                   <Flex
// //                     align="flex-start"
// //                     // justifyContent={"space-between"}
// //                     // padding={"0px 4px 0px 4px"}
// //                     flexDirection={"column"}
// //                   >
// //                     <FormLabel fontSize={"sm"} margin={0}>
// //                       Trasaction Status
// //                     </FormLabel>
// //                     <Select placeholder="Select  ">
// //                       <option value="pending">Pending</option>
// //                       <option value="clear">Clear</option>
// //                       <option value="pdc">PDC</option>
// //                       <option value="prov">Provisional</option>
// //                       <option value="bounced">Bounced</option>
// //                       <option value="return">Returned</option>

// //                       {/* Add more projects as needed */}
// //                     </Select>
// //                   </Flex>
// //                 </FormControl>
// //                 <FormControl>
// //                   <Flex
// //                     align="flex-start"
// //                     // justifyContent={"space-between"}
// //                     // padding={"0px 4px 0px 4px"}
// //                     flexDirection={"column"}
// //                   >
// //                     <FormLabel fontSize={"sm"} margin={0}>
// //                       Status Date
// //                     </FormLabel>
// //                     <Input
// //                       type="Date"
// //                       // w={"60%"}
// //                     />
// //                   </Flex>
// //                 </FormControl>
// //                 <FormControl>
// //                   <Flex
// //                     align="flex-start"
// //                     // justifyContent={"space-between"}
// //                     // padding={"0px 4px 0px 4px"}
// //                     flexDirection={"column"}
// //                   >
// //                     <FormLabel fontSize={"sm"} margin={0}>
// //                       Remarks
// //                     </FormLabel>
// //                     <Input type="text" w={"250%"} />
// //                   </Flex>
// //                 </FormControl>
// //                 {/* <Button
// //                   colorScheme="telegram"
// //                   top={3}
// //                   size={"md"}
// //                   pos={"relative"}
// //                   left={"60%"}
// //                   w={"80%"}
// //                 >
// //                   Submit
// //                 </Button> */}
// //               </HStack>
// //               <Button
// //                 colorScheme="telegram"
// //                 alignSelf={"flex-end"}
// //                 size={"md"}
// //                 m={3}
// //                 mt={0}
// //               >
// //                 Submit
// //               </Button>
// //             </VStack>
// //           </Box>
// //           <Divider w={"100%"} bg={"#121212"} />
// //           <Box display={"none"}>
// //             <TableContainer>
// //               <Table>
// //                 <Thead color={"white"}>
// //                   <Tr bg={"#121212"} color={"whitesmoke"}>
// //                     <Th color={"white"}>To convert</Th>
// //                     <Th color={"white"}>into</Th>
// //                     <Th isNumeric color={"white"}>
// //                       multiply by
// //                     </Th>
// //                     <Th color={"white"}>To convert</Th>
// //                     <Th color={"white"}>into</Th>
// //                     <Th color={"white"} isNumeric>
// //                       multiply by
// //                     </Th>
// //                     <Th color={"white"}>To convert</Th>
// //                     <Th color={"white"}>into</Th>
// //                     <Th isNumeric color={"white"}>
// //                       multiply by
// //                     </Th>
// //                     <Th color={"white"}> To convert</Th>
// //                     <Th color={"white"}>into</Th>
// //                     <Th isNumeric color={"white"}>
// //                       multiply by
// //                     </Th>
// //                     <Th color={"white"}>To convert</Th>
// //                     <Th color={"white"}>into</Th>
// //                     <Th isNumeric color={"white"}>
// //                       multiply by
// //                     </Th>
// //                   </Tr>
// //                 </Thead>
// //                 <Tbody>
// //                   <Tr>
// //                     <Td>inches</Td>
// //                     <Td>millimetres (mm)</Td>
// //                     <Td isNumeric>25.4</Td>
// //                     <Td>inches</Td>
// //                     <Td>millimetres (mm)</Td>
// //                     <Td isNumeric>25.4</Td>
// //                     <Td>inches</Td>
// //                     <Td>millimetres (mm)</Td>
// //                     <Td isNumeric>25.4</Td>
// //                     <Td>inches</Td>
// //                     <Td>millimetres (mm)</Td>
// //                     <Td isNumeric>25.4</Td>
// //                     <Td>inches</Td>
// //                     <Td>millimetres (mm)</Td>
// //                     <Td isNumeric>25.4</Td>
// //                   </Tr>
// //                 </Tbody>
// //               </Table>
// //             </TableContainer>
// //           </Box>
// //         </Box>
// //       </Box>
// //     </Box>
// //   );
// // };

// // export default PaymentTransaction;

// import React, { useState, useEffect } from "react";
// import axios from "axios";

// import {
//   Grid,
//   GridItem,
//   Input,
//   FormControl,
//   FormLabel,
//   Box,
//   Flex,
//   Center,
//   useToast,
//   VStack,
//   Textarea,
//   HStack,
//   Divider,
//   Text,
//   Button,
//   Table,
//   Thead,
//   Tr,
//   Th,
//   Tbody,
//   Td,
//   Select,
//   TableContainer,
// } from "@chakra-ui/react";

// const PaymentTransaction = () => {
//   const [displa, setdisplay] = useState(false);

//   const [projectName, setProjectName] = useState("");
//   const [blockName, setBlockname] = useState("");
//   const [plotName, setPlotName] = useState("");
//   const [contractorName, setcontractorName] = useState("");
//   const [projectsData, setprojectsData] = useState([]);
//   const [blockData, setblockData] = useState([]);
//   const [plotData, setplotData] = useState([]);
//   const [currentPlot, setCurrentPlot] = useState([]);
//   const [contractorData, setcontractorData] = useState([]);
//   const [transactionData, settransactionData] = useState([]);
//   const [bookingData, setbooking] = useState([]);
//   const toast = useToast();

//   const loadContractor = async () => {
//     let query = "SELECT * FROM contractor;";
//     // alert(query);

//     const url = "https://lkgexcel.com/backend/getQuery.php";
//     let fData = new FormData();

//     fData.append("query", query);

//     try {
//       const response = await axios.post(url, fData);

//       if (response && response.data) {
//         if (response.data.phpresult) {
//           setcontractorData(response.data.phpresult);
//           console.log(response.data.phpresult);
//         }
//       }
//     } catch (error) {
//       console.log("Please Select Proper Input");
//     }
//   };

//   const loadProjects = async () => {
//     let query = "SELECT * FROM project;";
//     // alert(query);

//     const url = "https://lkgexcel.com/backend/getQuery.php";
//     let fData = new FormData();

//     fData.append("query", query);

//     try {
//       const response = await axios.post(url, fData);

//       if (response && response.data) {
//         if (response.data.phpresult) {
//           setprojectsData(response.data.phpresult);
//           console.log(response.data.phpresult);
//         }
//       }
//     } catch (error) {
//       console.log("Please Select Proper Input");
//     }
//   };

//   const loadBlocks = async (pname) => {
//     let query = "SELECT * FROM block where projectName = '" + pname + "' ;";
//     // alert(query);

//     const url = "https://lkgexcel.com/backend/getQuery.php";
//     let fData = new FormData();

//     fData.append("query", query);

//     try {
//       const response = await axios.post(url, fData);

//       if (response && response.data) {
//         if (response.data.phpresult) {
//           setblockData(response.data.phpresult);
//           console.log(response.data.phpresult);
//         }
//       }
//     } catch (error) {
//       console.log("Please Select Proper Input");
//     }
//   };

//   const loadPlots = async (bname) => {
//     let query =
//       "SELECT * FROM plot where blockName = '" +
//       bname +
//       "' AND projectName ='" +
//       projectName +
//       "';";
//     // alert(query);

//     const url = "https://lkgexcel.com/backend/getQuery.php";
//     let fData = new FormData();

//     fData.append("query", query);

//     try {
//       const response = await axios.post(url, fData);

//       if (response && response.data) {
//         if (response.data.phpresult) {
//           setplotData(response.data.phpresult);
//           console.log(response.data.phpresult);

//           loadTransaction(response.data.phpresult);
//           loadAmounts(response.data.phpresult);
//         }
//       }
//     } catch (error) {
//       console.log("Please Select Proper Input");
//     }
//   };

//   const loadTransaction = async (plotData) => {
//     let query =
//       "SELECT * FROM transaction where blockName = '" +
//       plotData[0]["blockName"] +
//       "' AND projectName ='" +
//       projectName +
//       "'AND plotno ='" +
//       plotData[0]["plotNo"] +
//       "';";
//     // alert(query);

//     const url = "https://lkgexcel.com/backend/getQuery.php";
//     let fData = new FormData();

//     fData.append("query", query);

//     try {
//       const response = await axios.post(url, fData);

//       if (response && response.data) {
//         if (response.data.phpresult) {
//           settransactionData(response.data.phpresult);
//           console.log(response.data.phpresult);
//         }
//       }
//     } catch (error) {
//       console.log("Please Select Proper Input");
//     }
//   };

//   const loadAmounts = async (plotData) => {
//     let query =
//       "SELECT sum(Amount) as asum FROM transaction where blockName = '" +
//       plotData[0]["blockName"] +
//       "' AND projectName ='" +
//       projectName +
//       "'AND plotno ='" +
//       plotData[0]["plotNo"] +
//       "' ;";
//     // alert(query);

//     const url = "https://lkgexcel.com/backend/getQuery.php";
//     let fData = new FormData();

//     fData.append("query", query);

//     try {
//       const response = await axios.post(url, fData);

//       if (response && response.data) {
//         if (response.data.phpresult) {
//           Number(document.getElementById("totalReceived")).innerHTML =
//             response.data.phpresult[0]["asum"];
//           console.log(response.data.phpresult);
//         }
//       }
//     } catch (error) {
//       console.log("Please Select Proper Input");
//     }
//   };

//   const loadTransactionlater = async () => {
//     let query =
//       "SELECT * FROM transaction where blockName = '" +
//       blockName +
//       "' AND projectName ='" +
//       projectName +
//       "'AND plotno ='" +
//       plotName +
//       "';";
//     // alert(query);

//     const url = "https://lkgexcel.com/backend/getQuery.php";
//     let fData = new FormData();

//     fData.append("query", query);

//     try {
//       const response = await axios.post(url, fData);

//       if (response && response.data) {
//         if (response.data.phpresult) {
//           settransactionData(response.data.phpresult);
//           console.log(response.data.phpresult);
//         }
//       }
//     } catch (error) {
//       console.log("Please Select Proper Input");
//     }
//   };

//   const setData = async (plotName) => {
//     let query =
//       "SELECT * FROM booking where blockName = '" +
//       blockName +
//       "' AND projectName ='" +
//       projectName +
//       "' AND plotNo ='" +
//       plotName +
//       "'  ;";
//     // alert(query);

//     const url = "https://lkgexcel.com/backend/getQuery.php";
//     let fData = new FormData();

//     fData.append("query", query);

//     try {
//       const response = await axios.post(url, fData);

//       if (response && response.data) {
//         if (response.data.phpresult) {
//           setbooking(response.data.phpresult);
//           setCurrentPlot(response.data.phpresult);
//           console.log(response.data.phpresult);
//           document.getElementById("plotType").value =
//             response.data.phpresult[0]["plotType"];
//           document.getElementById("custName").value =
//             response.data.phpresult[0]["customerName"];
//           document.getElementById("custAddress").value =
//             response.data.phpresult[0]["customerAddress"];
//           //    document.getElementById("customerContact").value = response.data.phpresult[0]['customerContact'];
//           document.getElementById("registryGender").value =
//             response.data.phpresult[0]["registryGender"];
//           document.getElementById("areaSqmt").value =
//             response.data.phpresult[0]["areaSqft"];
//           document.getElementById("ratePerSqmt").value =
//             response.data.phpresult[0]["rateAreaSqft"];
//           document.getElementById("totalAmount").value =
//             response.data.phpresult[0]["totalAmount"];
//           document.getElementById("discountApplicable").value =
//             response.data.phpresult[0]["discountApplicable"];
//           document.getElementById("discountPercent").value =
//             response.data.phpresult[0]["discountPercent"];
//           document.getElementById("netAmount").value =
//             response.data.phpresult[0]["netAmount"];
//           document.getElementById("registryAmount").value =
//             response.data.phpresult[0]["registryAmount"];
//           document.getElementById("serviceAmount").value =
//             response.data.phpresult[0]["serviceAmount"];
//           document.getElementById("maintenanceAmount").value =
//             response.data.phpresult[0]["maintenanceAmount"];
//           document.getElementById("miscAmount").value =
//             response.data.phpresult[0]["miscAmount"];
//           document.getElementById("grandTotal").value =
//             response.data.phpresult[0]["grandTotal"];
//           document.getElementById("constructionApplicable").value =
//             response.data.phpresult[0]["constructionApplicable"];
//           setcontractorName(
//             response.data.phpresult[0]["constructionContractor"]
//           );
//           // document.getElementById("constructionContractor").value = response.data.phpresult[0]['constructionContractor'];
//           document.getElementById("totalAmountPayable").value =
//             response.data.phpresult[0]["totalAmountPayable"];
//           document.getElementById("guidelineAmount").value =
//             response.data.phpresult[0]["guidelineAmount"];
//           document.getElementById("registryPercent").value =
//             response.data.phpresult[0]["registryPercent"];
//           document.getElementById("bankAmountPayable").value =
//             response.data.phpresult[0]["bankAmountPayable"];
//           document.getElementById("cashAmountPayable").value =
//             response.data.phpresult[0]["cashAmountPayable"];
//           document.getElementById("bookingDate").value =
//             response.data.phpresult[0]["bookingDate"];
//           document.getElementById("constructionAmount").value =
//             response.data.phpresult[0]["constructionAmount"];

//           document.getElementById("bankPayable").innerHTML =
//             response.data.phpresult[0]["bankAmountPayable"];
//           document.getElementById("cashPayable").innerHTML =
//             response.data.phpresult[0]["cashAmountPayable"];
//           document.getElementById("totalPayable").innerHTML =
//             response.data.phpresult[0]["totalAmountPayable"];

//           document.getElementById("plotStatus").value =
//             plotData[0]["plotStatus"];
//         }
//       }
//     } catch (error) {
//       console.log("Please Select Proper Input");
//     }
//   };

//   const addPayment = async () => {
//     const url = "https://lkgexcel.com/backend/setQuery.php";
//     let query =
//       "INSERT INTO transaction (id,projectName,blockName,plotno, date, paymentType, amount, bankMode, cheqNo, bankName, transactionStatus, statusDate, remarks) VALUES (NULL,'" +
//       plotData[0]["projectName"] +
//       "','" +
//       plotData[0]["blockName"] +
//       "','" +
//       plotData[0]["plotNo"] +
//       "', '" +
//       document.getElementById("date").value +
//       "', '" +
//       document.getElementById("paymentType").value +
//       "', '" +
//       document.getElementById("amount").value +
//       "', '" +
//       document.getElementById("bankMode").value +
//       "', '" +
//       document.getElementById("cheqNo").value +
//       "', '" +
//       document.getElementById("bankName").value +
//       "', '" +
//       document.getElementById("transactionStatus").value +
//       "', '" +
//       document.getElementById("statusDate").value +
//       "', '" +
//       document.getElementById("remarks").value +
//       "');";

//     let fData = new FormData();
//     fData.append("query", query);
//     // Update total received amounts
//     const totalReceived =
//       parseFloat(document.getElementById("totalReceived").textContent) +
//       parseFloat(document.getElementById("amount").value);
//     document.getElementById("totalReceived").textContent =
//       totalReceived.toFixed(2);

//     // Update bank received amounts
//     const bankReceived = parseFloat(
//       document.getElementById("bankReceived").textContent
//     );
//     if (document.getElementById("bankMode").value === "bank") {
//       const bankAmount = parseFloat(document.getElementById("amount").value);
//       document.getElementById("bankReceived").textContent = (
//         bankReceived + bankAmount
//       ).toFixed(2);
//     }

//     // Update cash received amounts
//     const cashReceived = parseFloat(
//       document.getElementById("cashReceived").textContent
//     );
//     if (document.getElementById("bankMode").value === "cash") {
//       const cashAmount = parseFloat(document.getElementById("amount").value);
//       document.getElementById("cashReceived").textContent = (
//         cashReceived + cashAmount
//       ).toFixed(2);
//     }

//     // Update total balance amounts
//     const totalBalance =
//       totalReceived -
//       Number(document.getElementById("totalPayable").textContent);
//     document.getElementById("totalBalance").textContent =
//       totalBalance.toFixed(2);

//     // Update bank balance amounts
//     const bankBalance =
//       parseFloat(document.getElementById("bankPayable").textContent) -
//       parseFloat(document.getElementById("bankReceived").textContent);
//     document.getElementById("bankBalance").textContent = bankBalance.toFixed(2);

//     // Update cash balance amounts
//     const cashBalance =
//       parseFloat(document.getElementById("cashPayable").textContent) -
//       parseFloat(document.getElementById("cashReceived").textContent);
//     document.getElementById("cashBalance").textContent = cashBalance.toFixed(2);

//     try {
//       const response = await axios.post(url, fData);
//       toast({
//         title: "Payment added successfully!",
//         status: "success",
//         duration: 3000,
//         position: "top",
//         isClosable: true,
//       });
//     } catch (error) {
//       console.log(error.toJSON());
//     }
//   };

//   useEffect(() => {
//     // Call the loadContractor function when the component mounts
//     loadProjects();
//     loadContractor();
//     // loadTransaction();
//   }, []);

//   return (
//     <Box display={"flex"} height={"100vh"} maxW={"100vw"}>
//       <Box flex={"20%"} borderRight={"1px solid grey"}>
//         <VStack alignItems={"flex-start"} gap={0}>
//           <FormControl>
//             <Flex
//               align="center"
//               justifyContent={"space-between"}
//               padding={"0px 4px 0px 4px"}
//             >
//               <FormLabel htmlFor="projectName">Project Name</FormLabel>
//               <Select
//                 id="projectName"
//                 placeholder="Select Project"
//                 onChange={(e) => {
//                   setProjectName(e.target.value);
//                   loadBlocks(e.target.value);
//                 }}
//                 w={"60%"}
//               >
//                 {projectsData.map((project) => {
//                   return (
//                     <option
//                       key={project.projectName}
//                       value={project.projectName}
//                     >
//                       {project.projectName}
//                     </option>
//                   );
//                 })}
//                 {/* Add more projects as needed */}
//               </Select>
//             </Flex>
//           </FormControl>

//           <FormControl>
//             <Flex
//               align="center"
//               justifyContent={"space-between"}
//               padding={"0px 4px 0px 4px"}
//             >
//               <FormLabel htmlFor="blockName">Block Name</FormLabel>
//               <Select
//                 id="blockName"
//                 placeholder="Select Block"
//                 onChange={(e) => {
//                   setBlockname(e.target.value);
//                   loadPlots(e.target.value);
//                 }}
//                 w={"60%"}
//               >
//                 {blockData.map((block) => {
//                   return (
//                     <option key={block.blockName} value={block.blockName}>
//                       {block.blockName}
//                     </option>
//                   );
//                 })}
//               </Select>
//             </Flex>
//           </FormControl>

//           <FormControl>
//             <Flex
//               align="center"
//               justifyContent={"space-between"}
//               padding={"0px 4px 0px 4px"}
//             >
//               <FormLabel htmlFor="plotNo">Plot No</FormLabel>
//               <Select
//                 id="plotNo"
//                 placeholder="Select Plot No"
//                 onChange={(e) => {
//                   setPlotName(e.target.value);
//                   setData(e.target.value);
//                 }}
//                 w={"60%"}
//               >
//                 {plotData.map((plot) => {
//                   return (
//                     <option key={plot.plotNo} value={plot.plotNo}>
//                       {plot.plotNo}
//                     </option>
//                   );
//                 })}
//               </Select>
//             </Flex>
//           </FormControl>

//           <FormControl>
//             <Flex
//               align="center"
//               justifyContent={"space-between"}
//               padding={"0px 4px 0px 4px"}
//             >
//               <FormLabel htmlFor="plotType">Plot Type</FormLabel>
//               <Input
//                 id="plotType"
//                 type="text"
//                 placeholder="Enter Plot Type"
//                 w={"60%"}
//               />
//             </Flex>
//           </FormControl>

//           <FormControl>
//             <Flex
//               align="center"
//               justifyContent={"space-between"}
//               padding={"0px 4px 0px 4px"}
//             >
//               <FormLabel htmlFor="custName">Cust Name</FormLabel>
//               <Input
//                 id="custName"
//                 type="text"
//                 placeholder="Enter Cust name"
//                 w={"60%"}
//               />
//             </Flex>
//           </FormControl>

//           <FormControl>
//             <Flex
//               align="center"
//               justifyContent={"space-between"}
//               padding={"0px 4px 0px 4px"}
//             >
//               <FormLabel htmlFor="custAddress">Cust Address</FormLabel>
//               <Textarea
//                 id="custAddress"
//                 resize={"horizontal"}
//                 placeholder="Enter Address"
//                 w={"60%"}
//                 minH={"2.5rem"}
//               />
//             </Flex>
//           </FormControl>

//           <FormControl>
//             <Flex
//               align="center"
//               justifyContent={"space-between"}
//               padding={"0px 4px 0px 4px"}
//             >
//               <FormLabel htmlFor="areaSqft">Ares Sqft</FormLabel>
//               <Input
//                 id="areaSqmt"
//                 type="text"
//                 placeholder="Enter Area Sqft"
//                 w={"60%"}
//               />
//             </Flex>
//           </FormControl>

//           <FormControl>
//             <Flex
//               align="center"
//               justifyContent={"space-between"}
//               padding={"0px 4px 0px 4px"}
//             >
//               <FormLabel htmlFor="ratePerSqft">Rate Per Sqft</FormLabel>
//               <Input
//                 id="ratePerSqmt"
//                 type="text"
//                 placeholder="Enter Rate Sqft"
//                 w={"60%"}
//               />
//             </Flex>
//           </FormControl>

//           <FormControl>
//             <Flex
//               align="center"
//               justifyContent={"space-between"}
//               padding={"0px 4px 0px 4px"}
//             >
//               <FormLabel htmlFor="totalAmount">Total Amount</FormLabel>
//               <Input
//                 id="totalAmount"
//                 type="text"
//                 placeholder="Enter Amount"
//                 w={"60%"}
//               />
//             </Flex>
//           </FormControl>

//           <FormControl>
//             <Flex
//               align="center"
//               justifyContent={"space-between"}
//               padding={"0px 4px 0px 4px"}
//             >
//               <FormLabel htmlFor="discount">Discount</FormLabel>
//               <Select
//                 id="discountApplicable"
//                 placeholder="Select Discount"
//                 w={"60%"}
//               >
//                 <option value="Yes">Yes</option>
//                 <option value="No">No</option>
//                 {/* Add more options as needed */}
//               </Select>
//             </Flex>
//           </FormControl>

//           <FormControl>
//             <Flex
//               align="center"
//               justifyContent={"space-between"}
//               padding={"0px 4px 0px 4px"}
//             >
//               <FormLabel htmlFor="discountPercent">Discount %</FormLabel>
//               <Input
//                 id="discountPercent"
//                 type="text"
//                 placeholder="Enter Discount%"
//                 w={"60%"}
//               />
//             </Flex>
//           </FormControl>

//           <FormControl>
//             <Flex
//               align="center"
//               justifyContent={"space-between"}
//               padding={"0px 4px 0px 4px"}
//             >
//               <FormLabel htmlFor="netAmount">Net Amount</FormLabel>
//               <Input
//                 id="netAmount"
//                 type="text"
//                 placeholder="Enter Amount"
//                 w={"60%"}
//               />
//             </Flex>
//           </FormControl>

//           <FormControl>
//             <Flex
//               align="center"
//               justifyContent={"space-between"}
//               padding={"0px 4px 0px 4px"}
//             >
//               <FormLabel htmlFor="registryAmount">Registry Amount</FormLabel>
//               <Input
//                 id="registryAmount"
//                 type="text"
//                 placeholder="Enter Registry"
//                 w={"60%"}
//               />
//             </Flex>
//           </FormControl>

//           <FormControl>
//             <Flex
//               align="center"
//               justifyContent={"space-between"}
//               padding={"0px 4px 0px 4px"}
//             >
//               <FormLabel htmlFor="serviceAmount">Service Amount</FormLabel>
//               <Input
//                 id="serviceAmount"
//                 type="text"
//                 placeholder="Enter Amount"
//                 w={"60%"}
//               />
//             </Flex>
//           </FormControl>

//           <FormControl>
//             <Flex
//               align="center"
//               justifyContent={"space-between"}
//               padding={"0px 4px 0px 4px"}
//             >
//               <FormLabel htmlFor="maintenanceAmount">Maintenace Amt</FormLabel>
//               <Input
//                 id="maintenanceAmount"
//                 type="text"
//                 placeholder="Enter Amount"
//                 w={"60%"}
//               />
//             </Flex>
//           </FormControl>

//           <FormControl>
//             <Flex
//               align="center"
//               justifyContent={"space-between"}
//               padding={"0px 4px 0px 4px"}
//             >
//               <FormLabel htmlFor="miscAmount">Misc Amount</FormLabel>
//               <Input
//                 id="miscAmount"
//                 type="text"
//                 placeholder="Enter Amount"
//                 w={"60%"}
//               />
//             </Flex>
//           </FormControl>

//           <FormControl>
//             <Flex
//               align="center"
//               justifyContent={"space-between"}
//               padding={"0px 4px 0px 4px"}
//             >
//               <FormLabel htmlFor="grandTotal">Grand Total</FormLabel>
//               <Input
//                 id="grandTotal"
//                 type="text"
//                 placeholder="Enter Amount"
//                 w={"60%"}
//               />
//             </Flex>
//           </FormControl>

//           <FormControl>
//             <Flex
//               align="center"
//               justifyContent={"space-between"}
//               padding={"0px 4px 0px 4px"}
//             >
//               <FormLabel htmlFor="construction">Construction Yes/No</FormLabel>
//               <Select
//                 id="constructionApplicable"
//                 placeholder="Select"
//                 w={"60%"}
//               >
//                 <option value="Yes">Yes</option>
//                 <option value="No">No</option>
//                 {/* Add more options as needed */}
//               </Select>
//             </Flex>
//           </FormControl>

//           <FormControl>
//             <Flex
//               align="center"
//               justifyContent={"space-between"}
//               padding={"0px 4px 0px 4px"}
//             >
//               <FormLabel htmlFor="contractor">Contractor</FormLabel>
//               <Select
//                 id="constructionContractor"
//                 placeholder="Select"
//                 value={contractorName}
//                 onChange={(e) => {
//                   setcontractorName();
//                 }}
//                 w={"60%"}
//               >
//                 {contractorData.map((block) => {
//                   return (
//                     <option
//                       key={block.contractorName}
//                       value={block.contractorName}
//                     >
//                       {block.contractorName}
//                     </option>
//                   );
//                 })}
//               </Select>
//             </Flex>
//           </FormControl>

//           <FormControl>
//             <Flex
//               align="center"
//               justifyContent={"space-between"}
//               padding={"0px 4px 0px 4px"}
//             >
//               <FormLabel htmlFor="constructionAmount">
//                 Construction Amount
//               </FormLabel>
//               <Input
//                 id="constructionAmount"
//                 type="text"
//                 placeholder="Enter Amount"
//                 w={"60%"}
//               />
//             </Flex>
//           </FormControl>

//           <FormControl>
//             <Flex
//               align="center"
//               justifyContent={"space-between"}
//               padding={"0px 4px 0px 4px"}
//             >
//               <FormLabel htmlFor="totalAmountPayable">
//                 Total Amount Payable
//               </FormLabel>
//               <Input
//                 id="totalAmountPayable"
//                 type="text"
//                 placeholder="Enter Amount"
//                 w={"60%"}
//               />
//             </Flex>
//           </FormControl>

//           <FormControl>
//             <Flex
//               align="center"
//               justifyContent={"space-between"}
//               padding={"0px 4px 0px 4px"}
//             >
//               <FormLabel htmlFor="guidelineAmount">Guideline Amount</FormLabel>
//               <Input
//                 id="guidelineAmount"
//                 type="text"
//                 placeholder="Enter Amount"
//                 w={"60%"}
//               />
//             </Flex>
//           </FormControl>

//           <FormControl>
//             <Flex
//               align="center"
//               justifyContent={"space-between"}
//               padding={"0px 4px 0px 4px"}
//             >
//               <FormLabel htmlFor="registryPercent">Registry Percent</FormLabel>
//               <Input
//                 id="registryPercent"
//                 type="text"
//                 placeholder="Enter Amount"
//                 w={"60%"}
//               />
//             </Flex>
//           </FormControl>

//           <FormControl>
//             <Flex
//               align="center"
//               justifyContent={"space-between"}
//               padding={"0px 4px 0px 4px"}
//             >
//               <FormLabel htmlFor="bankAmountPayable">
//                 Bank Amount Payable
//               </FormLabel>
//               <Input
//                 id="bankAmountPayable"
//                 type="text"
//                 placeholder="Enter Amount"
//                 w={"60%"}
//               />
//             </Flex>
//           </FormControl>

//           <FormControl>
//             <Flex
//               align="center"
//               justifyContent={"space-between"}
//               padding={"0px 4px 0px 4px"}
//             >
//               <FormLabel htmlFor="cashAmountPayable">
//                 Cash Amount Payable
//               </FormLabel>
//               <Input
//                 id="cashAmountPayable"
//                 type="text"
//                 placeholder="Enter Amount"
//                 w={"60%"}
//               />
//             </Flex>
//           </FormControl>

//           <Flex padding={"0px 4px 0px 4px"} alignSelf={"end"}>
//             <Button colorScheme="blue"> Edit</Button>
//           </Flex>
//           {/* <Center>
//             <hr style={{ width: "80%", marginTop: "10px" }} />
//           </Center> */}
//         </VStack>
//       </Box>

//       <Box flex={"80%"} maxW={"80%"}>
//         <Box borderBottom={"1px solid black"} w={"100%"} p={2} pb={4}>
//           <HStack justifyContent={"space-between"}>
//             <Box maxW={"80%"}>
//               <HStack marginLeft={2}>
//                 <FormControl>
//                   <Flex
//                     align="center"
//                     // justifyContent={"space-between"}
//                     // padding={"0px 4px 0px 4px"}
//                   >
//                     <FormLabel fontSize={"sm"}>Plot Status</FormLabel>
//                     <Input type="text" id="plotStatus" w={"60%"} />
//                   </Flex>
//                 </FormControl>
//                 <FormControl>
//                   <Flex
//                     align="center"
//                     // justifyContent={"space-between"}
//                     // padding={"0px 4px 0px 4px"}
//                   >
//                     <FormLabel fontSize={"sm"}>Registry Gender</FormLabel>
//                     <Input type="text" id="registryGender" w={"60%"} />
//                   </Flex>
//                 </FormControl>
//                 <FormControl>
//                   <Flex
//                     align="center"
//                     // justifyContent={"space-between"}
//                     // padding={"0px 4px 0px 4px"}
//                   >
//                     <FormLabel fontSize={"sm"}>Registry Date</FormLabel>
//                     <Input type="date" id="bookingDate" w={"60%"} />
//                   </Flex>
//                 </FormControl>
//               </HStack>
//               <Divider mt={4} />
//               <HStack
//                 alignContent={"flex-start"}
//                 justifyContent={"space-between"}
//                 mt={4}
//                 mb={4}
//               >
//                 <VStack>
//                   <Text>
//                     Total Amount Payable = <span id="totalPayable">0</span>
//                   </Text>
//                   <Text>
//                     Bank Amount Payable = <span id="bankPayable">0</span>
//                   </Text>
//                   <Text>
//                     Cash Amount Payable = <span id="cashPayable">0</span>
//                   </Text>
//                 </VStack>
//                 <VStack>
//                   <Text>
//                     Total Amount Received = <span id="totalReceived">0</span>
//                   </Text>
//                   <Text>
//                     Bank Amount Received = <span id="bankReceived">0</span>
//                   </Text>
//                   <Text>
//                     Cash Amount Received = <span id="cashReceived">0</span>
//                   </Text>
//                 </VStack>
//                 <VStack>
//                   <Text>
//                     Total Amount Balance = <span id="totalBalance">0</span>
//                   </Text>
//                   <Text>
//                     Bank Amount Balance = <span id="bankBalance">0</span>
//                   </Text>
//                   <Text>
//                     Cash Amount Balance = <span id="cashBalance">0</span>
//                   </Text>
//                 </VStack>
//               </HStack>
//             </Box>
//             <VStack>
//               <Button colorScheme="orange" size={"sm"}>
//                 Registry
//               </Button>
//               <Button colorScheme="orange" size={"sm"}>
//                 Cancel Plot
//               </Button>
//               <Button colorScheme="orange" size={"sm"}>
//                 Delete Plot
//               </Button>
//               <Button colorScheme="orange" size={"sm"}>
//                 Register Plot
//               </Button>
//               <Button colorScheme="orange" size={"sm"}>
//                 History
//               </Button>
//             </VStack>
//           </HStack>
//           <Divider w={"100%"} bg={"#121212"} />
//           <HStack
//             alignContent={"flex-start"}
//             justifyContent={"space-between"}
//             mt={4}
//           >
//             <Text>Payment Transaction</Text>
//             <Button
//               colorScheme="teal"
//               size="sm"
//               onClick={() => {
//                 setdisplay(!displa);
//               }}
//             >
//               Add Payment
//             </Button>
//           </HStack>
//           <Divider w={"100%"} bg={"#121212"} mt={4} />
//           <Box display={displa == true ? "flex" : "none"}>
//             <VStack alignItems={"flex-start"}>
//               <HStack gap={"15px"} p={3}>
//                 <FormControl>
//                   <Flex
//                     align="flex-start"
//                     // justifyContent={"space-between"}
//                     // padding={"0px 4px 0px 4px"}
//                     flexDirection={"column"}
//                   >
//                     <FormLabel fontSize={"sm"} margin={0}>
//                       Date
//                     </FormLabel>
//                     <Input
//                       id="date"
//                       type="date"
//                       // w={"60%"}
//                     />
//                   </Flex>
//                 </FormControl>
//                 <FormControl>
//                   <Flex
//                     align="flex-start"
//                     // justifyContent={"space-between"}
//                     // padding={"0px 4px 0px 4px"}
//                     flexDirection={"column"}
//                   >
//                     <FormLabel fontSize={"sm"} margin={0}>
//                       Payment Type
//                     </FormLabel>
//                     <Select placeholder="Select" id="paymentType">
//                       <option value="cash">Cash</option>
//                       <option value="bank">Bank</option>
//                       {/* Add more projects as needed */}
//                     </Select>
//                   </Flex>
//                 </FormControl>
//                 <FormControl>
//                   <Flex
//                     align="flex-start"
//                     // justifyContent={"space-between"}
//                     // padding={"0px 4px 0px 4px"}
//                     flexDirection={"column"}
//                   >
//                     <FormLabel fontSize={"sm"} margin={0}>
//                       Amount
//                     </FormLabel>
//                     <Input
//                       id="amount"
//                       type="text"
//                       // w={"60%"}
//                     />
//                   </Flex>
//                 </FormControl>
//                 <FormControl>
//                   <Flex
//                     align="flex-start"
//                     // justifyContent={"space-between"}
//                     // padding={"0px 4px 0px 4px"}
//                     flexDirection={"column"}
//                   >
//                     <FormLabel fontSize={"sm"} margin={0}>
//                       Bank Mode
//                     </FormLabel>
//                     <Select placeholder="Select " id="bankMode">
//                       <option value="none">None</option>
//                       <option value="cheque">Cheque/DD</option>
//                       <option value="rtgs">RTGS/NEFT</option>
//                       <option value="loan">Loan</option>
//                       <option value="upi">UPI</option>

//                       {/* Add more projects as needed */}
//                     </Select>
//                   </Flex>
//                 </FormControl>
//                 <FormControl>
//                   <Flex
//                     align="flex-start"
//                     // justifyContent={"space-between"}
//                     // padding={"0px 4px 0px 4px"}
//                     flexDirection={"column"}
//                   >
//                     <FormLabel fontSize={"sm"} margin={0}>
//                       Chq/Ref No
//                     </FormLabel>
//                     <Input
//                       id="cheqNo"
//                       type="text"
//                       // w={"60%"}
//                     />
//                   </Flex>
//                 </FormControl>
//                 <FormControl>
//                   <Flex
//                     align="flex-start"
//                     // justifyContent={"space-between"}
//                     // padding={"0px 4px 0px 4px"}
//                     flexDirection={"column"}
//                   >
//                     <FormLabel fontSize={"sm"} margin={0}>
//                       Bank Name
//                     </FormLabel>
//                     <Input
//                       id="bankName"
//                       type="text"
//                       // w={"60%"}
//                     />
//                   </Flex>
//                 </FormControl>
//               </HStack>
//               <HStack gap={"15px"} p={3} pt={0}>
//                 <FormControl>
//                   <Flex
//                     align="flex-start"
//                     // justifyContent={"space-between"}
//                     // padding={"0px 4px 0px 4px"}
//                     flexDirection={"column"}
//                   >
//                     <FormLabel fontSize={"sm"} margin={0}>
//                       Trasaction Status
//                     </FormLabel>
//                     <Select id="transactionStatus" placeholder="Select">
//                       <option value="pending">Pending</option>
//                       <option value="clear">Clear</option>
//                       <option value="pdc">PDC</option>
//                       <option value="prov">Provisional</option>
//                       <option value="bounced">Bounced</option>
//                       <option value="return">Returned</option>

//                       {/* Add more projects as needed */}
//                     </Select>
//                   </Flex>
//                 </FormControl>
//                 <FormControl>
//                   <Flex
//                     align="flex-start"
//                     // justifyContent={"space-between"}
//                     // padding={"0px 4px 0px 4px"}
//                     flexDirection={"column"}
//                   >
//                     <FormLabel fontSize={"sm"} margin={0}>
//                       Status Date
//                     </FormLabel>
//                     <Input
//                       id="statusDate"
//                       type="Date"
//                       // w={"60%"}
//                     />
//                   </Flex>
//                 </FormControl>
//                 <FormControl>
//                   <Flex
//                     align="flex-start"
//                     // justifyContent={"space-between"}
//                     // padding={"0px 4px 0px 4px"}
//                     flexDirection={"column"}
//                   >
//                     <FormLabel fontSize={"sm"} margin={0}>
//                       Remarks
//                     </FormLabel>
//                     <Input id="remarks" type="text" w={"250%"} />
//                   </Flex>
//                 </FormControl>
//                 {/* <Button
//                   colorScheme="telegram"
//                   top={3}
//                   size={"md"}
//                   pos={"relative"}
//                   left={"60%"}
//                   w={"80%"}
//                 >
//                   Submit
//                 </Button> */}
//               </HStack>
//               <Button
//                 colorScheme="telegram"
//                 alignSelf={"flex-end"}
//                 size={"md"}
//                 m={3}
//                 mt={0}
//                 onClick={addPayment}
//               >
//                 Submit
//               </Button>
//             </VStack>
//           </Box>
//           <Divider w={"100%"} bg={"#121212"} />
//           <Box display={""}>
//             <TableContainer>
//               <Table>
//                 <Thead color={"white"}>
//                   <Tr bg={"#121212"} color={"whitesmoke"}>
//                     <Th color={"white"}>Date</Th>
//                     <Th color={"white"}>Payment Type</Th>
//                     <Th color={"white"}>Amount</Th>
//                     <Th color={"white"}>Bank Mode</Th>
//                     <Th color={"white"}>Chq/Ref No</Th>
//                     <Th color={"white"}>Bank Name</Th>
//                     <Th color={"white"}>Transaction Status</Th>
//                     <Th color={"white"}>Status Date</Th>
//                     <Th color={"white"}>Remarks</Th>
//                   </Tr>
//                 </Thead>
//                 <Tbody>
//                   {transactionData.map((res) => (
//                     <tr key={res.date}>
//                       <Td>{res.date}</Td>
//                       <Td>{res.paymentType}</Td>
//                       <Td>{res.amount}</Td>
//                       <Td>{res.bankMode}</Td>
//                       <Td>{res.cheqNo}</Td>
//                       <Td>{res.bankName}</Td>
//                       <Td>{res.transactionStatus}</Td>
//                       <Td>{res.statusDate}</Td>
//                       <Td>{res.remarks}</Td>
//                     </tr>
//                   ))}
//                 </Tbody>
//               </Table>
//             </TableContainer>
//           </Box>
//         </Box>
//       </Box>
//     </Box>
//   );
// };

// export default PaymentTransaction;



// import {
// //   Table,
// //   Thead,
// //   Tbody,
// //   Tr,
// //   Th,
// //   Td,
// //   Badge,
// //   Box,
// //   Select,
// //   Flex,
// //   Center,
// //   Text,
// //   Input,
// //   Button,
// //   Spinner,
// //   Checkbox, // Import Spinner component
// // } from "@chakra-ui/react";
// // import { useEffect, useState } from "react";
// // import axios from "axios";
// // import React from "react";

// // const BookingStatus = () => {
// //   const [bookings, setBooking] = useState([]);
// //   const [status, setStatus] = useState([]);
// //   const [selectedProject, setSelectedProject] = useState("");
// //   const [selectedBlock, setSelectedBlock] = useState("");
// //   const [selectedPlot, setSelectedPlot] = useState("");
// //   const [selectedDate, setSelectedDate] = useState("");
// //   const [highlightedRow, setHighlightedRow] = useState(null);
// //   const [loading, setLoading] = useState(true); // New loading state

// //   const handleSelectChange = (event, setter) => {
// //     setter(event.target.value);
// //     setHighlightedRow(null); // Reset highlighted row when dropdown selection changes
// //   };

// //   const loadBooking = async () => {
// //     let query = "SELECT * FROM booking;";

// //     const url = "https://lkgexcel.com/backend/getQuery.php";
// //     let fData = new FormData();

// //     fData.append("query", query);

// //     try {
// //       const response = await axios.post(url, fData);

// //       if (response && response.data) {
// //         if (response.data.phpresult) {
// //           setStatus(response.data.phpresult);
// //         }
// //       }
// //     } catch (error) {
// //       console.error("Error fetching booking data:", error);
// //     }
// //   };

// //   const fetchData = async () => {
// //     try {
// //       const response = await axios.get(
// //         "https://lkgexcel.com/backend/getplot.php"
// //       );
// //       setBooking(response.data);
// //       setLoading(false); // Set loading to false once data is fetched
// //     } catch (error) {
// //       console.error("Error fetching plot data:", error);
// //       setLoading(false); // Set loading to false in case of an error
// //     }
// //   };

// //   useEffect(() => {
// //     fetchData();
// //     loadBooking();
// //   }, []);

// //   const getUniqueValues = (key) => {
// //     return [...new Set(bookings.map((item) => item[key]))];
// //   };

// //   const projectOptions = getUniqueValues("projectName");
// //   const blockOptions = getUniqueValues("blockName");
// //   const plotOptions = getUniqueValues("plotNo");
// //   const filteredBookings = bookings.filter(
// //     (item) =>
// //       (!selectedProject || item.projectName === selectedProject) &&
// //       (!selectedBlock || item.blockName === selectedBlock) &&
// //       (!selectedPlot || item.plotNo === selectedPlot) &&
// //       (!selectedDate || item.bookingDate === selectedDate)
// //   );

// //   const clearFilters = () => {
// //     setSelectedProject("");
// //     setSelectedBlock("");
// //     setSelectedPlot("");
// //     setSelectedDate("");
// //     setHighlightedRow(null);
// //   };
// //   console.log(status);
// //   return (
// //     <>
// //       <Box mb={4}>
// //         <Center>
// //           <Text fontSize="30px" fontWeight="600" p="20px">
// //             Booking Status
// //           </Text>
// //         </Center>
// //         <Flex>
// //           <Select
// //             placeholder="Select Project"
// //             value={selectedProject}
// //             onChange={(event) => handleSelectChange(event, setSelectedProject)}
// //             mr={2}
// //             w={"25%"}
// //           >
// //             {projectOptions.map((project) => (
// //               <p>
// //                 <Checkbox value={project}>{project}</Checkbox>
// //               </p>
// //             ))}
// //           </Select>
// //           <Select
// //             placeholder="Select Block"
// //             value={selectedBlock}
// //             onChange={(event) => handleSelectChange(event, setSelectedBlock)}
// //             mr={2}
// //             w={"25%"}
// //           >
// //             {blockOptions.map((block) => (
// //               <option key={block} value={block}>
// //                 {block}
// //               </option>
// //             ))}
// //           </Select>
// //           <Select
// //             placeholder="Select Plot"
// //             w={"25%"}
// //             value={selectedPlot}
// //             onChange={(event) => handleSelectChange(event, setSelectedPlot)}
// //           >
// //             {plotOptions.map((plot) => (
// //               <option key={plot} value={plot}>
// //                 {plot}
// //               </option>
// //             ))}
// //           </Select>

// //           <Input
// //             type="date"
// //             placeholder="Search From Date"
// //             w={"20%"}
// //             ml={"2%"}
// //             value={selectedDate}
// //             onChange={(event) => handleSelectChange(event, setSelectedDate)}
// //             isDisabled={true}
// //           />

// //           <Button ml={2} onClick={clearFilters} colorScheme="red">
// //             Clear Filters
// //           </Button>
// //         </Flex>
// //       </Box>

// //       {loading ? ( // Render Spinner if loading
// //         <Center>
// //           <Spinner
// //             size="xl"
// //             position={"relative"}
// //             top={"5rem"}
// //             thickness="4px"
// //             speed="0.65s"
// //             emptyColor="gray.200"
// //             color="blue.500"
// //           />
// //         </Center>
// //       ) : (
// //         <Table variant="simple" colorScheme="blue">
// //           <Thead>
// //             <Tr>
// //               <Th>ProjectName</Th>
// //               <Th>BlockName</Th>
// //               <Th>PlotNo.</Th>
// //               <Th>AreaSqft</Th>
// //               <Th>AreaSqmt</Th>
// //               <Th>PlotType</Th>
// //               <Th>PlotStatus</Th>
// //               <Th>BookingDate</Th>
// //               <Th>RegistryDate</Th>
// //               <Th>CustName</Th>
// //               <Th>CustNo.</Th>
// //             </Tr>
// //           </Thead>
// //           <Tbody>
// //             {filteredBookings.map((plotItem, index) => (
// //               <Tr
// //                 key={plotItem.id}
// //                 onClick={() => setHighlightedRow(index)}
// //                 style={{
// //                   background:
// //                     highlightedRow === index ? "#FFFAF0" : "transparent",
// //                   cursor: "pointer",
// //                 }}
// //               >
// //                 <Td>{plotItem.projectName}</Td>
// //                 <Td>{plotItem.blockName}</Td>
// //                 <Td>{plotItem.plotNo}</Td>
// //                 <Td>{plotItem.areaSqft}</Td>
// //                 <Td>{plotItem.areaSqmt}</Td>
// //                 <Td>{plotItem.plotType}</Td>
// //                 <Td>
// //                   <Badge
// //                     colorScheme={
// //                       plotItem.plotStatus === "Available"
// //                         ? "yellow"
// //                         : plotItem.plotStatus === "Booked"
// //                         ? "red"
// //                         : plotItem.plotStatus === "Registry"
// //                         ? "green"
// //                         : "gray"
// //                     }
// //                   >
// //                     {plotItem.plotStatus}
// //                   </Badge>
// //                 </Td>

// //                 {status
// //                   .filter(
// //                     (book) =>
// //                       book.projectName === plotItem.projectName &&
// //                       book.blockName === plotItem.blockName &&
// //                       book.plotNo === plotItem.plotNo
// //                   )
// //                   .map((book) => (
// //                     <React.Fragment key={book.id}>
// //                       <Td>{book.bookingDate}</Td>
// //                       <Td textAlign={"center"}>
// //                         {book.registryDate === "0000-00-00"
// //                           ? "----"
// //                           : book.registryDate}
// //                       </Td>
// //                       <Td>{book.customerName}</Td>
// //                       <Td>{book.customerContact}</Td>
// //                     </React.Fragment>
// //                   ))}
// //               </Tr>
// //             ))}
// //           </Tbody>
// //         </Table>
// //       )}
// //     </>
// //   );
// // };

// // export default BookingStatus;
// import {
//   Table,
//   Thead,
//   Tbody,
//   Tr,
//   Th,
//   Td,
//   Badge,
//   Box,
//   Flex,
//   Center,
//   Text,
//   Input,
//   Button,
//   Spinner,
//   Checkbox,
//   Menu,
//   MenuButton,
//   MenuList,
//   MenuItem,
//   Select,
// } from "@chakra-ui/react";
// import { useEffect, useState } from "react";
// import axios from "axios";
// import React from "react";
// import { ChevronDownIcon } from "@chakra-ui/icons";

// const BookingStatus = () => {
//   const [bookings, setBooking] = useState([]);
//   const [status, setStatus] = useState([]);
//   const [selectedProject, setSelectedProject] = useState([]);
//   const [selectedBlock, setSelectedBlock] = useState([]);
//   const [selectedPlot, setSelectedPlot] = useState([]);
//   const [selectedDate, setSelectedDate] = useState("");
//   const [highlightedRow, setHighlightedRow] = useState(null);
//   const [loading, setLoading] = useState(true);
//   const [date, setDate] = useState([]);
//   const handleSelectChange = (event, setter) => {
//     setter(event.target.value);
//     setHighlightedRow(null);
//   };

//   const handleCheckboxChange = (value, state, setter) => {
//     if (state.includes(value)) {
//       setter(state.filter((item) => item !== value));
//     } else {
//       setter([...state, value]);
//     }
//   };

//   const loadBooking = async () => {
//     let query = "SELECT * FROM booking;";
//     let query2 = "SELECT registryDate FROM registry;";
//     const url = "https://lkgexcel.com/backend/getQuery.php";
//     let fData = new FormData();

//     fData.append("query", query);
//     fData.append("query2", query2);

//     try {
//       const response = await axios.post(url, fData);

//       if (response && response.data) {
//         if (response.data.phpresult) {
//           setStatus(response.data.phpresult);
//         }
//       }
//     } catch (error) {
//       console.error("Error fetching booking data:", error);
//     }
//   };
//   const loadDate = async () => {
//     let query = "SELECT registryDate FROM registry;";

//     const url = "https://lkgexcel.com/backend/getQuery.php";
//     let fData = new FormData();

//     fData.append("query", query);

//     try {
//       const response = await axios.post(url, fData);

//       if (response && response.data) {
//         if (response.data.phpresult) {
//           setDate(response.data.phpresult);
//         }
//       }
//     } catch (error) {
//       console.error("Error fetching booking data:", error);
//     }
//   };

//   const fetchData = async () => {
//     try {
//       const response = await axios.get(
//         "https://lkgexcel.com/backend/getplot.php"
//       );
//       setBooking(response.data);
//       setLoading(false);
//     } catch (error) {
//       console.error("Error fetching plot data:", error);
//       setLoading(false);
//     }
//   };

//   useEffect(() => {
//     fetchData();
//     loadBooking();
//     loadDate();
//   }, []);

//   const getUniqueValues = (key) => {
//     return [...new Set(bookings.map((item) => item[key]))];
//   };

//   const projectOptions = getUniqueValues("projectName");
//   const blockOptions = getUniqueValues("blockName");
//   const plotOptions = getUniqueValues("plotNo");
//   const filteredBookings = bookings.filter(
//     (item) =>
//       (!selectedProject.length ||
//         selectedProject.includes("Select All") ||
//         selectedProject.includes(item.projectName)) &&
//       (!selectedBlock.length ||
//         selectedBlock.includes("Select All") ||
//         selectedBlock.includes(item.blockName)) &&
//       (!selectedPlot.length ||
//         selectedPlot.includes("Select All") ||
//         selectedPlot.includes(item.plotNo)) &&
//       (!selectedDate || item.bookingDate === selectedDate)
//   );

//   const clearFilters = () => {
//     setSelectedProject([]);
//     setSelectedBlock([]);
//     setSelectedPlot([]);
//     setSelectedDate("");
//     setHighlightedRow(null);
//   };

//   return (
//     <>
//       <Box mb={4}>
//         <Center>
//           <Text fontSize="30px" fontWeight="600" p="20px">
//             Booking Status
//           </Text>
//         </Center>
//         <Flex justifyContent={"space-evenly"}>
//           <Menu>
//             <MenuButton as={Button} rightIcon={<ChevronDownIcon />}>
//               Select Projects
//             </MenuButton>
//             <MenuList>
//               <MenuItem>
//                 <Checkbox
//                   isChecked={selectedProject.includes("Select All")}
//                   onChange={() =>
//                     handleCheckboxChange(
//                       "Select All",
//                       selectedProject,
//                       setSelectedProject
//                     )
//                   }
//                 >
//                   Select All
//                 </Checkbox>
//               </MenuItem>
//               {projectOptions.map((project) => (
//                 <MenuItem key={project}>
//                   <Checkbox
//                     isChecked={selectedProject.includes(project)}
//                     onChange={() =>
//                       handleCheckboxChange(
//                         project,
//                         selectedProject,
//                         setSelectedProject
//                       )
//                     }
//                   >
//                     {project}
//                   </Checkbox>
//                 </MenuItem>
//               ))}
//             </MenuList>
//           </Menu>
//           <Menu>
//             <MenuButton as={Button} rightIcon={<ChevronDownIcon />}>
//               Select Blocks
//             </MenuButton>
//             <MenuList>
//               <MenuItem>
//                 <Checkbox
//                   isChecked={selectedBlock.includes("Select All")}
//                   onChange={() =>
//                     handleCheckboxChange(
//                       "Select All",
//                       selectedBlock,
//                       setSelectedBlock
//                     )
//                   }
//                 >
//                   Select All
//                 </Checkbox>
//               </MenuItem>
//               {blockOptions.map((block) => (
//                 <MenuItem key={block}>
//                   <Checkbox
//                     isChecked={selectedBlock.includes(block)}
//                     onChange={() =>
//                       handleCheckboxChange(
//                         block,
//                         selectedBlock,
//                         setSelectedBlock
//                       )
//                     }
//                   >
//                     {block}
//                   </Checkbox>
//                 </MenuItem>
//               ))}
//             </MenuList>
//           </Menu>
//           <Menu>
//             <MenuButton as={Button} rightIcon={<ChevronDownIcon />}>
//               Select Plots
//             </MenuButton>
//             <MenuList>
//               <MenuItem>
//                 <Checkbox
//                   isChecked={selectedPlot.includes("Select All")}
//                   onChange={() =>
//                     handleCheckboxChange(
//                       "Select All",
//                       selectedPlot,
//                       setSelectedPlot
//                     )
//                   }
//                 >
//                   Select All
//                 </Checkbox>
//               </MenuItem>
//               {plotOptions.map((plot) => (
//                 <MenuItem key={plot}>
//                   <Checkbox
//                     isChecked={selectedPlot.includes(plot)}
//                     onChange={() =>
//                       handleCheckboxChange(plot, selectedPlot, setSelectedPlot)
//                     }
//                   >
//                     {plot}
//                   </Checkbox>
//                 </MenuItem>
//               ))}
//             </MenuList>
//           </Menu>
//           <Input
//             type="date"
//             placeholder="Search From Date"
//             w={"10%"}
//             ml={"2%"}
//             value={selectedDate}
//             onChange={(event) => handleSelectChange(event, setSelectedDate)}
//             isDisabled={true}
//           />
//           <Button ml={2} onClick={clearFilters} colorScheme="red">
//             Clear Filters
//           </Button>
//         </Flex>
//       </Box>
//       {loading ? (
//         <Center>
//           <Spinner
//             size="xl"
//             position={"relative"}
//             top={"5rem"}
//             thickness="4px"
//             speed="0.65s"
//             emptyColor="gray.200"
//             color="blue.500"
//           />
//         </Center>
//       ) : (
//         <Table variant="simple" colorScheme="blue">
//           <Thead>
//             <Tr>
//               <Th>ProjectName</Th>
//               <Th>BlockName</Th>
//               <Th>PlotNo.</Th>
//               <Th>AreaSqft</Th>
//               <Th>AreaSqmt</Th>
//               <Th>PlotType</Th>
//               <Th>PlotStatus</Th>
//               <Th>BookingDate</Th>
//               <Th>RegistryDate</Th>
//               <Th>CustName</Th>
//               <Th>CustNo.</Th>
//             </Tr>
//           </Thead>
//           <Tbody>
//             {filteredBookings.map((plotItem, index) => (
//               <Tr
//                 key={plotItem.id}
//                 onClick={() => setHighlightedRow(index)}
//                 style={{
//                   background:
//                     highlightedRow === index ? "#FFFAF0" : "transparent",
//                   cursor: "pointer",
//                 }}
//               >
//                 <Td>{plotItem.projectName}</Td>
//                 <Td>{plotItem.blockName}</Td>
//                 <Td>{plotItem.plotNo}</Td>
//                 <Td>{plotItem.areaSqft}</Td>
//                 <Td>{plotItem.areaSqmt}</Td>
//                 <Td>{plotItem.plotType}</Td>
//                 <Td>
//                   <Badge
//                     colorScheme={
//                       plotItem.plotStatus === "Available"
//                         ? "yellow"
//                         : plotItem.plotStatus === "Booked"
//                         ? "red"
//                         : plotItem.plotStatus === "Registered"
//                         ? "green"
//                         : "gray"
//                     }
//                   >
//                     {plotItem.plotStatus}
//                   </Badge>
//                 </Td>
//                 {status
//                   .filter(
//                     (book) =>
//                       book.projectName === plotItem.projectName &&
//                       book.blockName === plotItem.blockName &&
//                       book.plotNo === plotItem.plotNo
//                   )
//                   .map((book) => (
//                     <React.Fragment key={book.id}>
//                       <Td>{book.bookingDate}</Td>
//                       <Td>
//                         {date
//                           .filter((res) => res.plotNo === plotItem.plotNo)
//                           .map((res) => res.registryDate)
//                           .join(", ") || "----"}
//                       </Td>
//                       <Td>{book.customerName}</Td>
//                       <Td>{book.customerContact}</Td>
//                     </React.Fragment>
//                   ))}
//               </Tr>
//             ))}
//           </Tbody>
//         </Table>
//       )}
//     </>
//   );
// };

// export default BookingStatus;
// const onAddBook = async () => {
  //   const url = "https://lkgexcel.com/backend/setQuery.php";
  //   let query =
  //     "INSERT INTO booking (id, projectName, blockName, plotNo, plotType, customerName, customerAddress, customerContact, registryGender, areaSqft, rateAreaSqft, totalAmount, discountApplicable, discountPercent, netAmount, registryAmount, serviceAmount, maintenanceAmount, miscAmount, grandTotal, constructionApplicable, constructionContractor, constructionAmount, totalAmountPayable, guidelineAmount, registryPercent, bankAmountPayable, bookingDate, cashAmountPayable, remarks, registryDate) VALUES (NULL, '" +
  //     document.getElementById("projectName").value +
  //     "', '" +
  //     document.getElementById("blockName").value +
  //     "', '" +
  //     document.getElementById("plotNo").value +
  //     "', '" +
  //     document.getElementById("plotType").value +
  //     "', '" +
  //     document.getElementById("customerName").value +
  //     "', '" +
  //     document.getElementById("customerAddress").value +
  //     "', '" +
  //     document.getElementById("customerContact").value +
  //     "', '" +
  //     document.getElementById("registryGender").value +
  //     "', '" +
  //     document.getElementById("areaSqft").value +
  //     "', '" +
  //     document.getElementById("rateAreaSqft").value +
  //     "', '" +
  //     document.getElementById("totalAmount").value +
  //     "', '" +
  //     document.getElementById("discountApplicable").value +
  //     "', '" +
  //     document.getElementById("discountPercent").value +
  //     "', '" +
  //     document.getElementById("netAmount").value +
  //     "', '" +
  //     document.getElementById("registryAmount").value +
  //     "', '" +
  //     document.getElementById("serviceAmount").value +
  //     "', '" +
  //     document.getElementById("maintenanceAmount").value +
  //     "', '" +
  //     document.getElementById("miscAmount").value +
  //     "', '" +
  //     document.getElementById("grandTotal").value +
  //     "', '" +
  //     document.getElementById("constructionApplicable").value +
  //     "', '" +
  //     document.getElementById("constructionContractor").value +
  //     "', '" +
  //     document.getElementById("constructionAmount").value +
  //     "', '" +
  //     document.getElementById("totalAmountPayable").value +
  //     "', '" +
  //     document.getElementById("guidelineAmount").value +
  //     "', '" +
  //     document.getElementById("registryPercent").value +
  //     "', '" +
  //     document.getElementById("bankAmountPayable").value +
  //     "', '" +
  //     document.getElementById("bookingDate").value +
  //     "', '" +
  //     document.getElementById("cashAmountPayable").value +
  //     "', '" +
  //     document.getElementById("remarks").value +
  //     "', '');";
  //   console.log(query);
  //   let fData = new FormData();
  //   fData.append("query", query);

  //   try {
  //     const response = await axios.post(url, fData);
  //     updatePlotStatus();
  //     toast({
  //       title: "Booking added successfully!",
  //       status: "success",
  //       duration: 3000,
  //       position: "top",
  //       isClosable: true,
  //     });
  //   } catch (error) {
  //     console.log(error.toJSON());
  //   }
  // };